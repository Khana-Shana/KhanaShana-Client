'use strict';

exports.__esModule = true;
exports.default = undefined;

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _filter = require('./filter');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FilterResults = function (_Component) {
  _inherits(FilterResults, _Component);

  function FilterResults() {
    _classCallCheck(this, FilterResults);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  FilterResults.prototype.render = function render() {
    var _props = this.props,
        value = _props.value,
        data = _props.data;

    return this.props.renderResults((0, _filter.filter)(value, data));
  };

  return FilterResults;
}(_react.Component);

exports.default = FilterResults;


FilterResults.propTypes = process.env.NODE_ENV !== "production" ? {
  value: _propTypes2.default.string.isRequired,
  data: _propTypes2.default.arrayOf(_propTypes2.default.object).isRequired,
  renderResults: _propTypes2.default.func.isRequired
} : {};
module.exports = exports['default'];