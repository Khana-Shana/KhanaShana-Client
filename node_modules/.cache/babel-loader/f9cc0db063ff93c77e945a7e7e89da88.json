{"ast":null,"code":"import getScrollParent from \"./getScrollParent.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport getWindow from \"./getWindow.js\";\nexport default function listScrollParents(element, list) {\n  if (list === void 0) {\n    list = [];\n  }\n\n  var scrollParent = getScrollParent(element);\n  var isBody = getNodeName(scrollParent) === 'body';\n  var win = getWindow(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : // $FlowFixMe: isBody tells us target will be an HTMLElement here\n  updatedList.concat(listScrollParents(getParentNode(target)));\n}","map":{"version":3,"sources":["/media/muji/Local Disk/University/1902/Software_Engineering/SE Project/Development/KhanaShana-Client/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"],"names":["getScrollParent","getParentNode","getNodeName","getWindow","listScrollParents","element","list","scrollParent","isBody","win","target","concat","visualViewport","updatedList"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,sBAA5B;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,eAAe,SAASC,iBAAT,CAA2BC,OAA3B,EAAoCC,IAApC,EAA0C;AACvD,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnBA,IAAAA,IAAI,GAAG,EAAP;AACD;;AAED,MAAIC,YAAY,GAAGP,eAAe,CAACK,OAAD,CAAlC;AACA,MAAIG,MAAM,GAAGN,WAAW,CAACK,YAAD,CAAX,KAA8B,MAA3C;AACA,MAAIE,GAAG,GAAGN,SAAS,CAACI,YAAD,CAAnB;AACA,MAAIG,MAAM,GAAGF,MAAM,GAAG,CAACC,GAAD,EAAME,MAAN,CAAaF,GAAG,CAACG,cAAJ,IAAsB,EAAnC,CAAH,GAA4CL,YAA/D;AACA,MAAIM,WAAW,GAAGP,IAAI,CAACK,MAAL,CAAYD,MAAZ,CAAlB;AACA,SAAOF,MAAM,GAAGK,WAAH,GAAiB;AAC9BA,EAAAA,WAAW,CAACF,MAAZ,CAAmBP,iBAAiB,CAACH,aAAa,CAACS,MAAD,CAAd,CAApC,CADA;AAED","sourcesContent":["import getScrollParent from \"./getScrollParent.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport getWindow from \"./getWindow.js\";\nexport default function listScrollParents(element, list) {\n  if (list === void 0) {\n    list = [];\n  }\n\n  var scrollParent = getScrollParent(element);\n  var isBody = getNodeName(scrollParent) === 'body';\n  var win = getWindow(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : // $FlowFixMe: isBody tells us target will be an HTMLElement here\n  updatedList.concat(listScrollParents(getParentNode(target)));\n}"]},"metadata":{},"sourceType":"module"}