{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar EmailJSResponseStatus_1 = require(\"./models/EmailJSResponseStatus\");\n\nexports.EmailJSResponseStatus = EmailJSResponseStatus_1.EmailJSResponseStatus;\n\nvar UI_1 = require(\"./services/ui/UI\");\n\nvar _userID = null;\nvar _origin = 'https://api.emailjs.com';\n\nfunction sendPost(url, data, headers) {\n  if (headers === void 0) {\n    headers = {};\n  }\n\n  return new Promise(function (resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', function (event) {\n      var responseStatus = new EmailJSResponseStatus_1.EmailJSResponseStatus(event.target);\n\n      if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n        resolve(responseStatus);\n      } else {\n        reject(responseStatus);\n      }\n    });\n    xhr.addEventListener('error', function (event) {\n      reject(new EmailJSResponseStatus_1.EmailJSResponseStatus(event.target));\n    });\n    xhr.open('POST', url, true);\n\n    for (var key in headers) {\n      xhr.setRequestHeader(key, headers[key]);\n    }\n\n    xhr.send(data);\n  });\n}\n\nfunction appendGoogleCaptcha(templatePrams) {\n  var element = document.getElementById('g-recaptcha-response');\n\n  if (element && element.value) {\n    templatePrams['g-recaptcha-response'] = element.value;\n  }\n\n  element = null;\n  return templatePrams;\n}\n/**\n * Initiation\n * @param {string} userID - set the EmailJS user ID\n * @param {string} origin - set the EmailJS origin\n */\n\n\nfunction init(userID, origin) {\n  _userID = userID;\n  _origin = origin || 'https://api.emailjs.com';\n}\n\nexports.init = init;\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {Object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\n\nfunction send(serviceID, templateID, templatePrams, userID) {\n  var params = {\n    lib_version: '2.4.1',\n    user_id: userID || _userID,\n    service_id: serviceID,\n    template_id: templateID,\n    template_params: appendGoogleCaptcha(templatePrams)\n  };\n  return sendPost(_origin + '/api/v1.0/email/send', JSON.stringify(params), {\n    'Content-type': 'application/json'\n  });\n}\n\nexports.send = send;\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\n\nfunction sendForm(serviceID, templateID, form, userID) {\n  if (typeof form === 'string') {\n    form = document.querySelector(form);\n  }\n\n  if (!form || form.nodeName !== 'FORM') {\n    throw 'Expected the HTML form element or the style selector of form';\n  }\n\n  UI_1.UI.progressState(form);\n  var formData = new FormData(form);\n  formData.append('lib_version', '2.4.1');\n  formData.append('service_id', serviceID);\n  formData.append('template_id', templateID);\n  formData.append('user_id', userID || _userID);\n  return sendPost(_origin + '/api/v1.0/email/send-form', formData).then(function (response) {\n    UI_1.UI.successState(form);\n    return response;\n  }, function (error) {\n    UI_1.UI.errorState(form);\n    return Promise.reject(error);\n  });\n}\n\nexports.sendForm = sendForm;\nexports.default = {\n  init: init,\n  send: send,\n  sendForm: sendForm\n};","map":{"version":3,"sources":["/media/muji/Local Disk/University/1902/Software_Engineering/SE Project/Development/KhanaShana-Client/node_modules/emailjs-com/source/index.js"],"names":["Object","defineProperty","exports","value","EmailJSResponseStatus_1","require","EmailJSResponseStatus","UI_1","_userID","_origin","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","event","responseStatus","target","status","text","open","key","setRequestHeader","send","appendGoogleCaptcha","templatePrams","element","document","getElementById","init","userID","origin","serviceID","templateID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","sendForm","form","querySelector","nodeName","UI","progressState","formData","FormData","append","then","response","successState","error","errorState","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EmailJSResponseStatus_1 = require(\"./models/EmailJSResponseStatus\");\nexports.EmailJSResponseStatus = EmailJSResponseStatus_1.EmailJSResponseStatus;\nvar UI_1 = require(\"./services/ui/UI\");\nvar _userID = null;\nvar _origin = 'https://api.emailjs.com';\nfunction sendPost(url, data, headers) {\n    if (headers === void 0) { headers = {}; }\n    return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', function (event) {\n            var responseStatus = new EmailJSResponseStatus_1.EmailJSResponseStatus(event.target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', function (event) {\n            reject(new EmailJSResponseStatus_1.EmailJSResponseStatus(event.target));\n        });\n        xhr.open('POST', url, true);\n        for (var key in headers) {\n            xhr.setRequestHeader(key, headers[key]);\n        }\n        xhr.send(data);\n    });\n}\nfunction appendGoogleCaptcha(templatePrams) {\n    var element = document.getElementById('g-recaptcha-response');\n    if (element && element.value) {\n        templatePrams['g-recaptcha-response'] = element.value;\n    }\n    element = null;\n    return templatePrams;\n}\n/**\n * Initiation\n * @param {string} userID - set the EmailJS user ID\n * @param {string} origin - set the EmailJS origin\n */\nfunction init(userID, origin) {\n    _userID = userID;\n    _origin = origin || 'https://api.emailjs.com';\n}\nexports.init = init;\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {Object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nfunction send(serviceID, templateID, templatePrams, userID) {\n    var params = {\n        lib_version: '2.4.1',\n        user_id: userID || _userID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: appendGoogleCaptcha(templatePrams)\n    };\n    return sendPost(_origin + '/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json'\n    });\n}\nexports.send = send;\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nfunction sendForm(serviceID, templateID, form, userID) {\n    if (typeof form === 'string') {\n        form = document.querySelector(form);\n    }\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'Expected the HTML form element or the style selector of form';\n    }\n    UI_1.UI.progressState(form);\n    var formData = new FormData(form);\n    formData.append('lib_version', '2.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', userID || _userID);\n    return sendPost(_origin + '/api/v1.0/email/send-form', formData)\n        .then(function (response) {\n        UI_1.UI.successState(form);\n        return response;\n    }, function (error) {\n        UI_1.UI.errorState(form);\n        return Promise.reject(error);\n    });\n}\nexports.sendForm = sendForm;\nexports.default = {\n    init: init,\n    send: send,\n    sendForm: sendForm\n};\n"]},"metadata":{},"sourceType":"script"}