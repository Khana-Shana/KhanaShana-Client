{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _CellSizeAndPositionManager = require('./CellSizeAndPositionManager');\n\nvar _CellSizeAndPositionManager2 = _interopRequireDefault(_CellSizeAndPositionManager);\n\nvar _maxElementSize = require('./maxElementSize.js');\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\n\n/**\n * Browsers have scroll offset limitations (eg Chrome stops scrolling at ~33.5M pixels where as Edge tops out at ~1.5M pixels).\n * After a certain position, the browser won't allow the user to scroll further (even via JavaScript scroll offset adjustments).\n * This util picks a lower ceiling for max size and artificially adjusts positions within to make it transparent for users.\n */\n\n\nvar ScalingCellSizeAndPositionManager = function () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n        maxScrollSize = _ref$maxScrollSize === undefined ? (0, _maxElementSize.getMaxElementSize)() : _ref$maxScrollSize,\n        params = (0, _objectWithoutProperties3.default)(_ref, ['maxScrollSize']);\n    (0, _classCallCheck3.default)(this, ScalingCellSizeAndPositionManager); // Favor composition over inheritance to simplify IE10 support\n\n    this._cellSizeAndPositionManager = new _CellSizeAndPositionManager2.default(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  (0, _createClass3.default)(ScalingCellSizeAndPositionManager, [{\n    key: 'areOffsetsAdjusted',\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: 'configure',\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: 'getCellCount',\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: 'getEstimatedCellSize',\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: 'getLastMeasuredIndex',\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n\n  }, {\n    key: 'getOffsetAdjustment',\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n          offset = _ref2.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: 'getSizeAndPositionOfCell',\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: 'getSizeAndPositionOfLastMeasuredCell',\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n    /** See CellSizeAndPositionManager#getTotalSize */\n\n  }, {\n    key: 'getTotalSize',\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n  }, {\n    key: 'getUpdatedOffsetForIndex',\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === undefined ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n  }, {\n    key: 'getVisibleCellRange',\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n          offset = _ref4.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: 'resetCell',\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: '_getOffsetPercentage',\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n          offset = _ref5.offset,\n          totalSize = _ref5.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: '_offsetToSafeOffset',\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n          offset = _ref6.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: '_safeOffsetToOffset',\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n          offset = _ref7.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n  return ScalingCellSizeAndPositionManager;\n}();\n\nexports.default = ScalingCellSizeAndPositionManager;","map":{"version":3,"sources":["/mnt/c/Users/Dell/Desktop/KhanaWeb/khanaweb/node_modules/react-virtualized/dist/commonjs/Grid/utils/ScalingCellSizeAndPositionManager.js"],"names":["Object","defineProperty","exports","value","_objectWithoutProperties2","require","_objectWithoutProperties3","_interopRequireDefault","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_CellSizeAndPositionManager","_CellSizeAndPositionManager2","_maxElementSize","_types","obj","__esModule","default","ScalingCellSizeAndPositionManager","_ref","_ref$maxScrollSize","maxScrollSize","undefined","getMaxElementSize","params","_cellSizeAndPositionManager","_maxScrollSize","key","areOffsetsAdjusted","getTotalSize","configure","getCellCount","getEstimatedCellSize","getLastMeasuredIndex","getOffsetAdjustment","_ref2","containerSize","offset","totalSize","safeTotalSize","offsetPercentage","_getOffsetPercentage","Math","round","getSizeAndPositionOfCell","index","getSizeAndPositionOfLastMeasuredCell","min","getUpdatedOffsetForIndex","_ref3","_ref3$align","align","currentOffset","targetIndex","_safeOffsetToOffset","_offsetToSafeOffset","getVisibleCellRange","_ref4","resetCell","_ref5","_ref6","_ref7"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _CellSizeAndPositionManager = require('./CellSizeAndPositionManager');\n\nvar _CellSizeAndPositionManager2 = _interopRequireDefault(_CellSizeAndPositionManager);\n\nvar _maxElementSize = require('./maxElementSize.js');\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\n\n\n/**\n * Browsers have scroll offset limitations (eg Chrome stops scrolling at ~33.5M pixels where as Edge tops out at ~1.5M pixels).\n * After a certain position, the browser won't allow the user to scroll further (even via JavaScript scroll offset adjustments).\n * This util picks a lower ceiling for max size and artificially adjusts positions within to make it transparent for users.\n */\n\nvar ScalingCellSizeAndPositionManager = function () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n        maxScrollSize = _ref$maxScrollSize === undefined ? (0, _maxElementSize.getMaxElementSize)() : _ref$maxScrollSize,\n        params = (0, _objectWithoutProperties3.default)(_ref, ['maxScrollSize']);\n    (0, _classCallCheck3.default)(this, ScalingCellSizeAndPositionManager);\n\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new _CellSizeAndPositionManager2.default(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  (0, _createClass3.default)(ScalingCellSizeAndPositionManager, [{\n    key: 'areOffsetsAdjusted',\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: 'configure',\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: 'getCellCount',\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: 'getEstimatedCellSize',\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: 'getLastMeasuredIndex',\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n\n  }, {\n    key: 'getOffsetAdjustment',\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n          offset = _ref2.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: 'getSizeAndPositionOfCell',\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: 'getSizeAndPositionOfLastMeasuredCell',\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n\n    /** See CellSizeAndPositionManager#getTotalSize */\n\n  }, {\n    key: 'getTotalSize',\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n  }, {\n    key: 'getUpdatedOffsetForIndex',\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === undefined ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n  }, {\n    key: 'getVisibleCellRange',\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n          offset = _ref4.offset;\n\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: 'resetCell',\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: '_getOffsetPercentage',\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n          offset = _ref5.offset,\n          totalSize = _ref5.totalSize;\n\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: '_offsetToSafeOffset',\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n          offset = _ref6.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: '_safeOffsetToOffset',\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n          offset = _ref7.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n  return ScalingCellSizeAndPositionManager;\n}();\n\nexports.default = ScalingCellSizeAndPositionManager;"]},"metadata":{},"sourceType":"script"}