{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Just-in-time calculates and caches size and position information for a collection of cells.\n */\n\n\nvar CellSizeAndPositionManager = function () {\n  // Used in deferred mode to track which cells have been queued for measurement.\n  // Cache of size and position data for cells, mapped by cell index.\n  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex\n  function CellSizeAndPositionManager(_ref) {\n    var cellCount = _ref.cellCount,\n        cellSizeGetter = _ref.cellSizeGetter,\n        estimatedCellSize = _ref.estimatedCellSize;\n    (0, _classCallCheck3.default)(this, CellSizeAndPositionManager);\n    this._cellSizeAndPositionData = {};\n    this._lastMeasuredIndex = -1;\n    this._lastBatchedIndex = -1;\n    this._cellSizeGetter = cellSizeGetter;\n    this._cellCount = cellCount;\n    this._estimatedCellSize = estimatedCellSize;\n  } // Measurements for cells up to this index can be trusted; cells afterward should be estimated.\n\n\n  (0, _createClass3.default)(CellSizeAndPositionManager, [{\n    key: 'areOffsetsAdjusted',\n    value: function areOffsetsAdjusted() {\n      return false;\n    }\n  }, {\n    key: 'configure',\n    value: function configure(_ref2) {\n      var cellCount = _ref2.cellCount,\n          estimatedCellSize = _ref2.estimatedCellSize,\n          cellSizeGetter = _ref2.cellSizeGetter;\n      this._cellCount = cellCount;\n      this._estimatedCellSize = estimatedCellSize;\n      this._cellSizeGetter = cellSizeGetter;\n    }\n  }, {\n    key: 'getCellCount',\n    value: function getCellCount() {\n      return this._cellCount;\n    }\n  }, {\n    key: 'getEstimatedCellSize',\n    value: function getEstimatedCellSize() {\n      return this._estimatedCellSize;\n    }\n  }, {\n    key: 'getLastMeasuredIndex',\n    value: function getLastMeasuredIndex() {\n      return this._lastMeasuredIndex;\n    }\n  }, {\n    key: 'getOffsetAdjustment',\n    value: function getOffsetAdjustment() {\n      return 0;\n    }\n    /**\n     * This method returns the size and position for the cell at the specified index.\n     * It just-in-time calculates (or used cached values) for cells leading up to the index.\n     */\n\n  }, {\n    key: 'getSizeAndPositionOfCell',\n    value: function getSizeAndPositionOfCell(index) {\n      if (index < 0 || index >= this._cellCount) {\n        throw Error('Requested index ' + index + ' is outside of range 0..' + this._cellCount);\n      }\n\n      if (index > this._lastMeasuredIndex) {\n        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n\n        var _offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n\n        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {\n          var _size = this._cellSizeGetter({\n            index: i\n          }); // undefined or NaN probably means a logic error in the size getter.\n          // null means we're using CellMeasurer and haven't yet measured a given index.\n\n\n          if (_size === undefined || isNaN(_size)) {\n            throw Error('Invalid size returned for cell ' + i + ' of value ' + _size);\n          } else if (_size === null) {\n            this._cellSizeAndPositionData[i] = {\n              offset: _offset,\n              size: 0\n            };\n            this._lastBatchedIndex = index;\n          } else {\n            this._cellSizeAndPositionData[i] = {\n              offset: _offset,\n              size: _size\n            };\n            _offset += _size;\n            this._lastMeasuredIndex = index;\n          }\n        }\n      }\n\n      return this._cellSizeAndPositionData[index];\n    }\n  }, {\n    key: 'getSizeAndPositionOfLastMeasuredCell',\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {\n        offset: 0,\n        size: 0\n      };\n    }\n    /**\n     * Total size of all cells being measured.\n     * This value will be completely estimated initially.\n     * As cells are measured, the estimate will be updated.\n     */\n\n  }, {\n    key: 'getTotalSize',\n    value: function getTotalSize() {\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;\n      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;\n      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;\n    }\n    /**\n     * Determines a new offset that ensures a certain cell is visible, given the current offset.\n     * If the cell is already visible then the current offset will be returned.\n     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.\n     *\n     * @param align Desired alignment within container; one of \"auto\" (default), \"start\", or \"end\"\n     * @param containerSize Size (width or height) of the container viewport\n     * @param currentOffset Container's current (x or y) offset\n     * @param totalSize Total size (width or height) of all cells\n     * @return Offset to use to ensure the specified cell is visible\n     */\n\n  }, {\n    key: 'getUpdatedOffsetForIndex',\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === undefined ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n\n      if (containerSize <= 0) {\n        return 0;\n      }\n\n      var datum = this.getSizeAndPositionOfCell(targetIndex);\n      var maxOffset = datum.offset;\n      var minOffset = maxOffset - containerSize + datum.size;\n      var idealOffset = void 0;\n\n      switch (align) {\n        case 'start':\n          idealOffset = maxOffset;\n          break;\n\n        case 'end':\n          idealOffset = minOffset;\n          break;\n\n        case 'center':\n          idealOffset = maxOffset - (containerSize - datum.size) / 2;\n          break;\n\n        default:\n          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));\n          break;\n      }\n\n      var totalSize = this.getTotalSize();\n      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));\n    }\n  }, {\n    key: 'getVisibleCellRange',\n    value: function getVisibleCellRange(params) {\n      var containerSize = params.containerSize,\n          offset = params.offset;\n      var totalSize = this.getTotalSize();\n\n      if (totalSize === 0) {\n        return {};\n      }\n\n      var maxOffset = offset + containerSize;\n\n      var start = this._findNearestCell(offset);\n\n      var datum = this.getSizeAndPositionOfCell(start);\n      offset = datum.offset + datum.size;\n      var stop = start;\n\n      while (offset < maxOffset && stop < this._cellCount - 1) {\n        stop++;\n        offset += this.getSizeAndPositionOfCell(stop).size;\n      }\n\n      return {\n        start: start,\n        stop: stop\n      };\n    }\n    /**\n     * Clear all cached values for cells after the specified index.\n     * This method should be called for any cell that has changed its size.\n     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.\n     */\n\n  }, {\n    key: 'resetCell',\n    value: function resetCell(index) {\n      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);\n    }\n  }, {\n    key: '_binarySearch',\n    value: function _binarySearch(high, low, offset) {\n      while (low <= high) {\n        var middle = low + Math.floor((high - low) / 2);\n        var _currentOffset = this.getSizeAndPositionOfCell(middle).offset;\n\n        if (_currentOffset === offset) {\n          return middle;\n        } else if (_currentOffset < offset) {\n          low = middle + 1;\n        } else if (_currentOffset > offset) {\n          high = middle - 1;\n        }\n      }\n\n      if (low > 0) {\n        return low - 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: '_exponentialSearch',\n    value: function _exponentialSearch(index, offset) {\n      var interval = 1;\n\n      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {\n        index += interval;\n        interval *= 2;\n      }\n\n      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);\n    }\n    /**\n     * Searches for the cell (index) nearest the specified offset.\n     *\n     * If no exact match is found the next lowest cell index will be returned.\n     * This allows partially visible cells (with offsets just before/above the fold) to be visible.\n     */\n\n  }, {\n    key: '_findNearestCell',\n    value: function _findNearestCell(offset) {\n      if (isNaN(offset)) {\n        throw Error('Invalid offset ' + offset + ' specified');\n      } // Our search algorithms find the nearest match at or below the specified offset.\n      // So make sure the offset is at least 0 or no match will be found.\n\n\n      offset = Math.max(0, offset);\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);\n\n      if (lastMeasuredCellSizeAndPosition.offset >= offset) {\n        // If we've already measured cells within this range just use a binary search as it's faster.\n        return this._binarySearch(lastMeasuredIndex, 0, offset);\n      } else {\n        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.\n        // The overall complexity for this approach is O(log n).\n        return this._exponentialSearch(lastMeasuredIndex, offset);\n      }\n    }\n  }]);\n  return CellSizeAndPositionManager;\n}();\n\nexports.default = CellSizeAndPositionManager;","map":{"version":3,"sources":["/mnt/c/Users/Dell/Desktop/KhanaWeb/khanaweb/node_modules/react-virtualized/dist/commonjs/Grid/utils/CellSizeAndPositionManager.js"],"names":["Object","defineProperty","exports","value","_classCallCheck2","require","_classCallCheck3","_interopRequireDefault","_createClass2","_createClass3","_types","obj","__esModule","default","CellSizeAndPositionManager","_ref","cellCount","cellSizeGetter","estimatedCellSize","_cellSizeAndPositionData","_lastMeasuredIndex","_lastBatchedIndex","_cellSizeGetter","_cellCount","_estimatedCellSize","key","areOffsetsAdjusted","configure","_ref2","getCellCount","getEstimatedCellSize","getLastMeasuredIndex","getOffsetAdjustment","getSizeAndPositionOfCell","index","Error","lastMeasuredCellSizeAndPosition","getSizeAndPositionOfLastMeasuredCell","_offset","offset","size","i","_size","undefined","isNaN","getTotalSize","totalSizeOfMeasuredCells","numUnmeasuredCells","totalSizeOfUnmeasuredCells","getUpdatedOffsetForIndex","_ref3","_ref3$align","align","containerSize","currentOffset","targetIndex","datum","maxOffset","minOffset","idealOffset","Math","max","min","totalSize","getVisibleCellRange","params","start","_findNearestCell","stop","resetCell","_binarySearch","high","low","middle","floor","_currentOffset","_exponentialSearch","interval","lastMeasuredIndex"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Just-in-time calculates and caches size and position information for a collection of cells.\n */\n\nvar CellSizeAndPositionManager = function () {\n\n  // Used in deferred mode to track which cells have been queued for measurement.\n\n  // Cache of size and position data for cells, mapped by cell index.\n  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex\n  function CellSizeAndPositionManager(_ref) {\n    var cellCount = _ref.cellCount,\n        cellSizeGetter = _ref.cellSizeGetter,\n        estimatedCellSize = _ref.estimatedCellSize;\n    (0, _classCallCheck3.default)(this, CellSizeAndPositionManager);\n    this._cellSizeAndPositionData = {};\n    this._lastMeasuredIndex = -1;\n    this._lastBatchedIndex = -1;\n\n    this._cellSizeGetter = cellSizeGetter;\n    this._cellCount = cellCount;\n    this._estimatedCellSize = estimatedCellSize;\n  }\n\n  // Measurements for cells up to this index can be trusted; cells afterward should be estimated.\n\n\n  (0, _createClass3.default)(CellSizeAndPositionManager, [{\n    key: 'areOffsetsAdjusted',\n    value: function areOffsetsAdjusted() {\n      return false;\n    }\n  }, {\n    key: 'configure',\n    value: function configure(_ref2) {\n      var cellCount = _ref2.cellCount,\n          estimatedCellSize = _ref2.estimatedCellSize,\n          cellSizeGetter = _ref2.cellSizeGetter;\n\n      this._cellCount = cellCount;\n      this._estimatedCellSize = estimatedCellSize;\n      this._cellSizeGetter = cellSizeGetter;\n    }\n  }, {\n    key: 'getCellCount',\n    value: function getCellCount() {\n      return this._cellCount;\n    }\n  }, {\n    key: 'getEstimatedCellSize',\n    value: function getEstimatedCellSize() {\n      return this._estimatedCellSize;\n    }\n  }, {\n    key: 'getLastMeasuredIndex',\n    value: function getLastMeasuredIndex() {\n      return this._lastMeasuredIndex;\n    }\n  }, {\n    key: 'getOffsetAdjustment',\n    value: function getOffsetAdjustment() {\n      return 0;\n    }\n\n    /**\n     * This method returns the size and position for the cell at the specified index.\n     * It just-in-time calculates (or used cached values) for cells leading up to the index.\n     */\n\n  }, {\n    key: 'getSizeAndPositionOfCell',\n    value: function getSizeAndPositionOfCell(index) {\n      if (index < 0 || index >= this._cellCount) {\n        throw Error('Requested index ' + index + ' is outside of range 0..' + this._cellCount);\n      }\n\n      if (index > this._lastMeasuredIndex) {\n        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n        var _offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n\n        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {\n          var _size = this._cellSizeGetter({ index: i });\n\n          // undefined or NaN probably means a logic error in the size getter.\n          // null means we're using CellMeasurer and haven't yet measured a given index.\n          if (_size === undefined || isNaN(_size)) {\n            throw Error('Invalid size returned for cell ' + i + ' of value ' + _size);\n          } else if (_size === null) {\n            this._cellSizeAndPositionData[i] = {\n              offset: _offset,\n              size: 0\n            };\n\n            this._lastBatchedIndex = index;\n          } else {\n            this._cellSizeAndPositionData[i] = {\n              offset: _offset,\n              size: _size\n            };\n\n            _offset += _size;\n\n            this._lastMeasuredIndex = index;\n          }\n        }\n      }\n\n      return this._cellSizeAndPositionData[index];\n    }\n  }, {\n    key: 'getSizeAndPositionOfLastMeasuredCell',\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {\n        offset: 0,\n        size: 0\n      };\n    }\n\n    /**\n     * Total size of all cells being measured.\n     * This value will be completely estimated initially.\n     * As cells are measured, the estimate will be updated.\n     */\n\n  }, {\n    key: 'getTotalSize',\n    value: function getTotalSize() {\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;\n      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;\n      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;\n    }\n\n    /**\n     * Determines a new offset that ensures a certain cell is visible, given the current offset.\n     * If the cell is already visible then the current offset will be returned.\n     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.\n     *\n     * @param align Desired alignment within container; one of \"auto\" (default), \"start\", or \"end\"\n     * @param containerSize Size (width or height) of the container viewport\n     * @param currentOffset Container's current (x or y) offset\n     * @param totalSize Total size (width or height) of all cells\n     * @return Offset to use to ensure the specified cell is visible\n     */\n\n  }, {\n    key: 'getUpdatedOffsetForIndex',\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === undefined ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n\n      if (containerSize <= 0) {\n        return 0;\n      }\n\n      var datum = this.getSizeAndPositionOfCell(targetIndex);\n      var maxOffset = datum.offset;\n      var minOffset = maxOffset - containerSize + datum.size;\n\n      var idealOffset = void 0;\n\n      switch (align) {\n        case 'start':\n          idealOffset = maxOffset;\n          break;\n        case 'end':\n          idealOffset = minOffset;\n          break;\n        case 'center':\n          idealOffset = maxOffset - (containerSize - datum.size) / 2;\n          break;\n        default:\n          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));\n          break;\n      }\n\n      var totalSize = this.getTotalSize();\n\n      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));\n    }\n  }, {\n    key: 'getVisibleCellRange',\n    value: function getVisibleCellRange(params) {\n      var containerSize = params.containerSize,\n          offset = params.offset;\n\n\n      var totalSize = this.getTotalSize();\n\n      if (totalSize === 0) {\n        return {};\n      }\n\n      var maxOffset = offset + containerSize;\n      var start = this._findNearestCell(offset);\n\n      var datum = this.getSizeAndPositionOfCell(start);\n      offset = datum.offset + datum.size;\n\n      var stop = start;\n\n      while (offset < maxOffset && stop < this._cellCount - 1) {\n        stop++;\n\n        offset += this.getSizeAndPositionOfCell(stop).size;\n      }\n\n      return {\n        start: start,\n        stop: stop\n      };\n    }\n\n    /**\n     * Clear all cached values for cells after the specified index.\n     * This method should be called for any cell that has changed its size.\n     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.\n     */\n\n  }, {\n    key: 'resetCell',\n    value: function resetCell(index) {\n      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);\n    }\n  }, {\n    key: '_binarySearch',\n    value: function _binarySearch(high, low, offset) {\n      while (low <= high) {\n        var middle = low + Math.floor((high - low) / 2);\n        var _currentOffset = this.getSizeAndPositionOfCell(middle).offset;\n\n        if (_currentOffset === offset) {\n          return middle;\n        } else if (_currentOffset < offset) {\n          low = middle + 1;\n        } else if (_currentOffset > offset) {\n          high = middle - 1;\n        }\n      }\n\n      if (low > 0) {\n        return low - 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: '_exponentialSearch',\n    value: function _exponentialSearch(index, offset) {\n      var interval = 1;\n\n      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {\n        index += interval;\n        interval *= 2;\n      }\n\n      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);\n    }\n\n    /**\n     * Searches for the cell (index) nearest the specified offset.\n     *\n     * If no exact match is found the next lowest cell index will be returned.\n     * This allows partially visible cells (with offsets just before/above the fold) to be visible.\n     */\n\n  }, {\n    key: '_findNearestCell',\n    value: function _findNearestCell(offset) {\n      if (isNaN(offset)) {\n        throw Error('Invalid offset ' + offset + ' specified');\n      }\n\n      // Our search algorithms find the nearest match at or below the specified offset.\n      // So make sure the offset is at least 0 or no match will be found.\n      offset = Math.max(0, offset);\n\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);\n\n      if (lastMeasuredCellSizeAndPosition.offset >= offset) {\n        // If we've already measured cells within this range just use a binary search as it's faster.\n        return this._binarySearch(lastMeasuredIndex, 0, offset);\n      } else {\n        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.\n        // The overall complexity for this approach is O(log n).\n        return this._exponentialSearch(lastMeasuredIndex, offset);\n      }\n    }\n  }]);\n  return CellSizeAndPositionManager;\n}();\n\nexports.default = CellSizeAndPositionManager;"]},"metadata":{},"sourceType":"script"}