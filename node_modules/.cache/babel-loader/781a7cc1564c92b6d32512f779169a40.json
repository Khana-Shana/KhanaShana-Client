{"ast":null,"code":"import * as React from 'react';\nimport isFunction from 'lodash/isFunction';\nimport get from 'lodash/get';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nfunction cloneCell(Cell, props) {\n  return React.cloneElement(Cell, props);\n}\n\nfunction colSpanCells(cells) {\n  var nextCells = [];\n\n  for (var i = 0; i < cells.length; i += 1) {\n    var _cells$i$props = cells[i].props,\n        width = _cells$i$props.width,\n        colSpan = _cells$i$props.colSpan;\n    /**\n     * 如果存在 colSpan 属性，就去找它的下一个 Cell,\n     * 看看值是否是 isNullOrUndefined，，如果为空这可以合并这个单元格\n     */\n\n    if (colSpan) {\n      var nextWidth = width;\n\n      for (var j = 0; j < colSpan; j += 1) {\n        var nextCell = cells[i + j];\n\n        if (nextCell) {\n          var _nextCell$props = nextCell.props,\n              rowData = _nextCell$props.rowData,\n              rowIndex = _nextCell$props.rowIndex,\n              children = _nextCell$props.children,\n              colSpanWidth = _nextCell$props.width,\n              isHeaderCell = _nextCell$props.isHeaderCell,\n              dataKey = _nextCell$props.dataKey;\n          var cellText = isFunction(children) ? children(rowData, rowIndex) : get(rowData, dataKey);\n\n          if (rowData && isNullOrUndefined(cellText) || isHeaderCell && isNullOrUndefined(children)) {\n            nextWidth += colSpanWidth;\n            cells[i + j] = cloneCell(nextCell, {\n              removed: true\n            });\n          }\n        }\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: nextWidth\n      }));\n      continue;\n    }\n\n    nextCells.push(cells[i]);\n  }\n\n  return nextCells;\n}\n\nexport default colSpanCells;","map":{"version":3,"sources":["/mnt/c/Users/Dell/Desktop/se/KhanaShana-Client/node_modules/rsuite-table/es/utils/colSpanCells.js"],"names":["React","isFunction","get","isNullOrUndefined","cloneCell","Cell","props","cloneElement","colSpanCells","cells","nextCells","i","length","_cells$i$props","width","colSpan","nextWidth","j","nextCell","_nextCell$props","rowData","rowIndex","children","colSpanWidth","isHeaderCell","dataKey","cellText","removed","push"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;AAC9B,SAAON,KAAK,CAACO,YAAN,CAAmBF,IAAnB,EAAyBC,KAAzB,CAAP;AACD;;AAED,SAASE,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,MAAIC,SAAS,GAAG,EAAhB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,IAAI,CAAvC,EAA0C;AACxC,QAAIE,cAAc,GAAGJ,KAAK,CAACE,CAAD,CAAL,CAASL,KAA9B;AAAA,QACIQ,KAAK,GAAGD,cAAc,CAACC,KAD3B;AAAA,QAEIC,OAAO,GAAGF,cAAc,CAACE,OAF7B;AAGA;;;;;AAKA,QAAIA,OAAJ,EAAa;AACX,UAAIC,SAAS,GAAGF,KAAhB;;AAEA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAApB,EAA6BE,CAAC,IAAI,CAAlC,EAAqC;AACnC,YAAIC,QAAQ,GAAGT,KAAK,CAACE,CAAC,GAAGM,CAAL,CAApB;;AAEA,YAAIC,QAAJ,EAAc;AACZ,cAAIC,eAAe,GAAGD,QAAQ,CAACZ,KAA/B;AAAA,cACIc,OAAO,GAAGD,eAAe,CAACC,OAD9B;AAAA,cAEIC,QAAQ,GAAGF,eAAe,CAACE,QAF/B;AAAA,cAGIC,QAAQ,GAAGH,eAAe,CAACG,QAH/B;AAAA,cAIIC,YAAY,GAAGJ,eAAe,CAACL,KAJnC;AAAA,cAKIU,YAAY,GAAGL,eAAe,CAACK,YALnC;AAAA,cAMIC,OAAO,GAAGN,eAAe,CAACM,OAN9B;AAOA,cAAIC,QAAQ,GAAGzB,UAAU,CAACqB,QAAD,CAAV,GAAuBA,QAAQ,CAACF,OAAD,EAAUC,QAAV,CAA/B,GAAqDnB,GAAG,CAACkB,OAAD,EAAUK,OAAV,CAAvE;;AAEA,cAAIL,OAAO,IAAIjB,iBAAiB,CAACuB,QAAD,CAA5B,IAA0CF,YAAY,IAAIrB,iBAAiB,CAACmB,QAAD,CAA/E,EAA2F;AACzFN,YAAAA,SAAS,IAAIO,YAAb;AACAd,YAAAA,KAAK,CAACE,CAAC,GAAGM,CAAL,CAAL,GAAeb,SAAS,CAACc,QAAD,EAAW;AACjCS,cAAAA,OAAO,EAAE;AADwB,aAAX,CAAxB;AAGD;AACF;AACF;;AAEDjB,MAAAA,SAAS,CAACkB,IAAV,CAAexB,SAAS,CAACK,KAAK,CAACE,CAAD,CAAN,EAAW;AACjCG,QAAAA,KAAK,EAAEE;AAD0B,OAAX,CAAxB;AAGA;AACD;;AAEDN,IAAAA,SAAS,CAACkB,IAAV,CAAenB,KAAK,CAACE,CAAD,CAApB;AACD;;AAED,SAAOD,SAAP;AACD;;AAED,eAAeF,YAAf","sourcesContent":["import * as React from 'react';\nimport isFunction from 'lodash/isFunction';\nimport get from 'lodash/get';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nfunction cloneCell(Cell, props) {\n  return React.cloneElement(Cell, props);\n}\n\nfunction colSpanCells(cells) {\n  var nextCells = [];\n\n  for (var i = 0; i < cells.length; i += 1) {\n    var _cells$i$props = cells[i].props,\n        width = _cells$i$props.width,\n        colSpan = _cells$i$props.colSpan;\n    /**\n     * 如果存在 colSpan 属性，就去找它的下一个 Cell,\n     * 看看值是否是 isNullOrUndefined，，如果为空这可以合并这个单元格\n     */\n\n    if (colSpan) {\n      var nextWidth = width;\n\n      for (var j = 0; j < colSpan; j += 1) {\n        var nextCell = cells[i + j];\n\n        if (nextCell) {\n          var _nextCell$props = nextCell.props,\n              rowData = _nextCell$props.rowData,\n              rowIndex = _nextCell$props.rowIndex,\n              children = _nextCell$props.children,\n              colSpanWidth = _nextCell$props.width,\n              isHeaderCell = _nextCell$props.isHeaderCell,\n              dataKey = _nextCell$props.dataKey;\n          var cellText = isFunction(children) ? children(rowData, rowIndex) : get(rowData, dataKey);\n\n          if (rowData && isNullOrUndefined(cellText) || isHeaderCell && isNullOrUndefined(children)) {\n            nextWidth += colSpanWidth;\n            cells[i + j] = cloneCell(nextCell, {\n              removed: true\n            });\n          }\n        }\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: nextWidth\n      }));\n      continue;\n    }\n\n    nextCells.push(cells[i]);\n  }\n\n  return nextCells;\n}\n\nexport default colSpanCells;"]},"metadata":{},"sourceType":"module"}