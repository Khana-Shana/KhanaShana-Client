{"ast":null,"code":"import firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { Component } from '@firebase/component';\nimport { __values, __spread, __awaiter, __generator, __assign } from 'tslib';\nimport { ErrorFactory } from '@firebase/util';\nimport { deleteDb, openDb } from 'idb';\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar _a;\n\nvar ERROR_MAP = (_a = {}, _a[\"missing-app-config-values\"\n/* MISSING_APP_CONFIG_VALUES */\n] = 'Missing App configuration value: \"{$valueName}\"', _a[\"only-available-in-window\"\n/* AVAILABLE_IN_WINDOW */\n] = 'This method is available in a Window context.', _a[\"only-available-in-sw\"\n/* AVAILABLE_IN_SW */\n] = 'This method is available in a service worker context.', _a[\"permission-default\"\n/* PERMISSION_DEFAULT */\n] = 'The notification permission was not granted and dismissed instead.', _a[\"permission-blocked\"\n/* PERMISSION_BLOCKED */\n] = 'The notification permission was not granted and blocked instead.', _a[\"unsupported-browser\"\n/* UNSUPPORTED_BROWSER */\n] = \"This browser doesn't support the API's required to use the firebase SDK.\", _a[\"failed-service-worker-registration\"\n/* FAILED_DEFAULT_REGISTRATION */\n] = 'We are unable to register the default service worker. {$browserErrorMessage}', _a[\"token-subscribe-failed\"\n/* TOKEN_SUBSCRIBE_FAILED */\n] = 'A problem occured while subscribing the user to FCM: {$errorInfo}', _a[\"token-subscribe-no-token\"\n/* TOKEN_SUBSCRIBE_NO_TOKEN */\n] = 'FCM returned no token when subscribing the user to push.', _a[\"token-unsubscribe-failed\"\n/* TOKEN_UNSUBSCRIBE_FAILED */\n] = 'A problem occured while unsubscribing the ' + 'user from FCM: {$errorInfo}', _a[\"token-update-failed\"\n/* TOKEN_UPDATE_FAILED */\n] = 'A problem occured while updating the user from FCM: {$errorInfo}', _a[\"token-update-no-token\"\n/* TOKEN_UPDATE_NO_TOKEN */\n] = 'FCM returned no token when updating the user to push.', _a[\"use-sw-after-get-token\"\n/* USE_SW_AFTER_GET_TOKEN */\n] = 'The useServiceWorker() method may only be called once and must be ' + 'called before calling getToken() to ensure your service worker is used.', _a[\"invalid-sw-registration\"\n/* INVALID_SW_REGISTRATION */\n] = 'The input to useServiceWorker() must be a ServiceWorkerRegistration.', _a[\"invalid-bg-handler\"\n/* INVALID_BG_HANDLER */\n] = 'The input to setBackgroundMessageHandler() must be a function.', _a[\"invalid-vapid-key\"\n/* INVALID_VAPID_KEY */\n] = 'The public VAPID key must be a string.', _a[\"use-vapid-key-after-get-token\"\n/* USE_VAPID_KEY_AFTER_GET_TOKEN */\n] = 'The usePublicVapidKey() method may only be called once and must be ' + 'called before calling getToken() to ensure your VAPID key is used.', _a);\nvar ERROR_FACTORY = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction extractAppConfig(app) {\n  var e_1, _a;\n\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  } // Required app config keys\n\n\n  var configKeys = ['projectId', 'apiKey', 'appId', 'messagingSenderId'];\n  var options = app.options;\n\n  try {\n    for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {\n      var keyName = configKeys_1_1.value;\n\n      if (!options[keyName]) {\n        throw getMissingValueError(keyName);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId,\n    apiKey: options.apiKey,\n    appId: options.appId,\n    senderId: options.messagingSenderId\n  };\n}\n\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  , {\n    valueName: valueName\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction arrayToBase64(array) {\n  var uint8Array = new Uint8Array(array);\n  var base64String = btoa(String.fromCharCode.apply(String, __spread(uint8Array)));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nfunction base64ToArray(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  var rawData = atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar OLD_DB_NAME = 'fcm_token_details_db';\n/**\r\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher,\r\n * so that the upgrade callback is called for all versions of the old DB.\r\n */\n\nvar OLD_DB_VERSION = 5;\nvar OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nfunction migrateOldDatabase(senderId) {\n  return __awaiter(this, void 0, void 0, function () {\n    var databases, dbNames, tokenDetails, db;\n\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!('databases' in indexedDB)) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , indexedDB.databases()];\n\n        case 1:\n          databases = _a.sent();\n          dbNames = databases.map(function (db) {\n            return db.name;\n          });\n\n          if (!dbNames.includes(OLD_DB_NAME)) {\n            // old DB didn't exist, no need to open.\n            return [2\n            /*return*/\n            , null];\n          }\n\n          _a.label = 2;\n\n        case 2:\n          tokenDetails = null;\n          return [4\n          /*yield*/\n          , openDb(OLD_DB_NAME, OLD_DB_VERSION, function (db) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var objectStore, value, oldDetails, oldDetails, oldDetails;\n\n              var _a;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    if (db.oldVersion < 2) {\n                      // Database too old, skip migration.\n                      return [2\n                      /*return*/\n                      ];\n                    }\n\n                    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n                      // Database did not exist. Nothing to do.\n                      return [2\n                      /*return*/\n                      ];\n                    }\n\n                    objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n                    return [4\n                    /*yield*/\n                    , objectStore.index('fcmSenderId').get(senderId)];\n\n                  case 1:\n                    value = _b.sent();\n                    return [4\n                    /*yield*/\n                    , objectStore.clear()];\n\n                  case 2:\n                    _b.sent();\n\n                    if (!value) {\n                      // No entry in the database, nothing to migrate.\n                      return [2\n                      /*return*/\n                      ];\n                    }\n\n                    if (db.oldVersion === 2) {\n                      oldDetails = value;\n\n                      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n                        return [2\n                        /*return*/\n                        ];\n                      }\n\n                      tokenDetails = {\n                        token: oldDetails.fcmToken,\n                        createTime: (_a = oldDetails.createTime) !== null && _a !== void 0 ? _a : Date.now(),\n                        subscriptionOptions: {\n                          auth: oldDetails.auth,\n                          p256dh: oldDetails.p256dh,\n                          endpoint: oldDetails.endpoint,\n                          swScope: oldDetails.swScope,\n                          vapidKey: typeof oldDetails.vapidKey === 'string' ? oldDetails.vapidKey : arrayToBase64(oldDetails.vapidKey)\n                        }\n                      };\n                    } else if (db.oldVersion === 3) {\n                      oldDetails = value;\n                      tokenDetails = {\n                        token: oldDetails.fcmToken,\n                        createTime: oldDetails.createTime,\n                        subscriptionOptions: {\n                          auth: arrayToBase64(oldDetails.auth),\n                          p256dh: arrayToBase64(oldDetails.p256dh),\n                          endpoint: oldDetails.endpoint,\n                          swScope: oldDetails.swScope,\n                          vapidKey: arrayToBase64(oldDetails.vapidKey)\n                        }\n                      };\n                    } else if (db.oldVersion === 4) {\n                      oldDetails = value;\n                      tokenDetails = {\n                        token: oldDetails.fcmToken,\n                        createTime: oldDetails.createTime,\n                        subscriptionOptions: {\n                          auth: arrayToBase64(oldDetails.auth),\n                          p256dh: arrayToBase64(oldDetails.p256dh),\n                          endpoint: oldDetails.endpoint,\n                          swScope: oldDetails.swScope,\n                          vapidKey: arrayToBase64(oldDetails.vapidKey)\n                        }\n                      };\n                    }\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          })];\n\n        case 3:\n          db = _a.sent();\n          db.close(); // Delete all old databases.\n\n          return [4\n          /*yield*/\n          , deleteDb(OLD_DB_NAME)];\n\n        case 4:\n          // Delete all old databases.\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , deleteDb('fcm_vapid_details_db')];\n\n        case 5:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , deleteDb('undefined')];\n\n        case 6:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , checkTokenDetails(tokenDetails) ? tokenDetails : null];\n      }\n    });\n  });\n}\n\nfunction checkTokenDetails(tokenDetails) {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n\n  var subscriptionOptions = tokenDetails.subscriptionOptions;\n  return typeof tokenDetails.createTime === 'number' && tokenDetails.createTime > 0 && typeof tokenDetails.token === 'string' && tokenDetails.token.length > 0 && typeof subscriptionOptions.auth === 'string' && subscriptionOptions.auth.length > 0 && typeof subscriptionOptions.p256dh === 'string' && subscriptionOptions.p256dh.length > 0 && typeof subscriptionOptions.endpoint === 'string' && subscriptionOptions.endpoint.length > 0 && typeof subscriptionOptions.swScope === 'string' && subscriptionOptions.swScope.length > 0 && typeof subscriptionOptions.vapidKey === 'string' && subscriptionOptions.vapidKey.length > 0;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Exported for tests.\n\n\nvar DATABASE_NAME = 'firebase-messaging-database';\nvar DATABASE_VERSION = 1;\nvar OBJECT_STORE_NAME = 'firebase-messaging-store';\nvar dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDb) {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Gets record(s) from the objectStore that match the given key. */\n\n\nfunction dbGet(firebaseDependencies) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tokenDetails, oldTokenDetails;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(firebaseDependencies);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          return [4\n          /*yield*/\n          , db.transaction(OBJECT_STORE_NAME).objectStore(OBJECT_STORE_NAME).get(key)];\n\n        case 2:\n          tokenDetails = _a.sent();\n          if (!tokenDetails) return [3\n          /*break*/\n          , 3];\n          return [2\n          /*return*/\n          , tokenDetails];\n\n        case 3:\n          return [4\n          /*yield*/\n          , migrateOldDatabase(firebaseDependencies.appConfig.senderId)];\n\n        case 4:\n          oldTokenDetails = _a.sent();\n          if (!oldTokenDetails) return [3\n          /*break*/\n          , 6];\n          return [4\n          /*yield*/\n          , dbSet(firebaseDependencies, oldTokenDetails)];\n\n        case 5:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , oldTokenDetails];\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nfunction dbSet(firebaseDependencies, tokenDetails) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(firebaseDependencies);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          return [4\n          /*yield*/\n          , tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key)];\n\n        case 2:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , tx.complete];\n\n        case 3:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , tokenDetails];\n      }\n    });\n  });\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nfunction dbRemove(firebaseDependencies) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(firebaseDependencies);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          return [4\n          /*yield*/\n          , tx.objectStore(OBJECT_STORE_NAME).delete(key)];\n\n        case 2:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , tx.complete];\n\n        case 3:\n          _a.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction getKey(_a) {\n  var appConfig = _a.appConfig;\n  return appConfig.appId;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nvar DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\nvar DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\nvar ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n/** Key of FCM Payload in Notification's data field. */\n\nvar FCM_MSG = 'FCM_MSG';\nvar CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nvar CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\nvar CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\n/** Set to '1' if Analytics is enabled for the campaign */\n\nvar CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction requestGetToken(firebaseDependencies, subscriptionOptions) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, body, subscribeOptions, responseData, response, err_1, message;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getHeaders(firebaseDependencies)];\n\n        case 1:\n          headers = _a.sent();\n          body = getBody(subscriptionOptions);\n          subscribeOptions = {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify(body)\n          };\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 5,, 6]);\n\n          return [4\n          /*yield*/\n          , fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions)];\n\n        case 3:\n          response = _a.sent();\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 4:\n          responseData = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          err_1 = _a.sent();\n          throw ERROR_FACTORY.create(\"token-subscribe-failed\"\n          /* TOKEN_SUBSCRIBE_FAILED */\n          , {\n            errorInfo: err_1\n          });\n\n        case 6:\n          if (responseData.error) {\n            message = responseData.error.message;\n            throw ERROR_FACTORY.create(\"token-subscribe-failed\"\n            /* TOKEN_SUBSCRIBE_FAILED */\n            , {\n              errorInfo: message\n            });\n          }\n\n          if (!responseData.token) {\n            throw ERROR_FACTORY.create(\"token-subscribe-no-token\"\n            /* TOKEN_SUBSCRIBE_NO_TOKEN */\n            );\n          }\n\n          return [2\n          /*return*/\n          , responseData.token];\n      }\n    });\n  });\n}\n\nfunction requestUpdateToken(firebaseDependencies, tokenDetails) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, body, updateOptions, responseData, response, err_2, message;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getHeaders(firebaseDependencies)];\n\n        case 1:\n          headers = _a.sent();\n          body = getBody(tokenDetails.subscriptionOptions);\n          updateOptions = {\n            method: 'PATCH',\n            headers: headers,\n            body: JSON.stringify(body)\n          };\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 5,, 6]);\n\n          return [4\n          /*yield*/\n          , fetch(getEndpoint(firebaseDependencies.appConfig) + \"/\" + tokenDetails.token, updateOptions)];\n\n        case 3:\n          response = _a.sent();\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 4:\n          responseData = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          err_2 = _a.sent();\n          throw ERROR_FACTORY.create(\"token-update-failed\"\n          /* TOKEN_UPDATE_FAILED */\n          , {\n            errorInfo: err_2\n          });\n\n        case 6:\n          if (responseData.error) {\n            message = responseData.error.message;\n            throw ERROR_FACTORY.create(\"token-update-failed\"\n            /* TOKEN_UPDATE_FAILED */\n            , {\n              errorInfo: message\n            });\n          }\n\n          if (!responseData.token) {\n            throw ERROR_FACTORY.create(\"token-update-no-token\"\n            /* TOKEN_UPDATE_NO_TOKEN */\n            );\n          }\n\n          return [2\n          /*return*/\n          , responseData.token];\n      }\n    });\n  });\n}\n\nfunction requestDeleteToken(firebaseDependencies, token) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, unsubscribeOptions, response, responseData, message, err_3;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getHeaders(firebaseDependencies)];\n\n        case 1:\n          headers = _a.sent();\n          unsubscribeOptions = {\n            method: 'DELETE',\n            headers: headers\n          };\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 5,, 6]);\n\n          return [4\n          /*yield*/\n          , fetch(getEndpoint(firebaseDependencies.appConfig) + \"/\" + token, unsubscribeOptions)];\n\n        case 3:\n          response = _a.sent();\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 4:\n          responseData = _a.sent();\n\n          if (responseData.error) {\n            message = responseData.error.message;\n            throw ERROR_FACTORY.create(\"token-unsubscribe-failed\"\n            /* TOKEN_UNSUBSCRIBE_FAILED */\n            , {\n              errorInfo: message\n            });\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          err_3 = _a.sent();\n          throw ERROR_FACTORY.create(\"token-unsubscribe-failed\"\n          /* TOKEN_UNSUBSCRIBE_FAILED */\n          , {\n            errorInfo: err_3\n          });\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction getEndpoint(_a) {\n  var projectId = _a.projectId;\n  return ENDPOINT + \"/projects/\" + projectId + \"/registrations\";\n}\n\nfunction getHeaders(_a) {\n  var appConfig = _a.appConfig,\n      installations = _a.installations;\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , installations.getToken()];\n\n        case 1:\n          authToken = _b.sent();\n          return [2\n          /*return*/\n          , new Headers({\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n            'x-goog-api-key': appConfig.apiKey,\n            'x-goog-firebase-installations-auth': \"FIS \" + authToken\n          })];\n      }\n    });\n  });\n}\n\nfunction getBody(_a) {\n  var p256dh = _a.p256dh,\n      auth = _a.auth,\n      endpoint = _a.endpoint,\n      vapidKey = _a.vapidKey;\n  var body = {\n    web: {\n      endpoint: endpoint,\n      auth: auth,\n      p256dh: p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** UpdateRegistration will be called once every week. */\n\n\nvar TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nfunction getToken(firebaseDependencies, swRegistration, vapidKey) {\n  return __awaiter(this, void 0, void 0, function () {\n    var pushSubscription, tokenDetails, subscriptionOptions, e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (Notification.permission !== 'granted') {\n            throw ERROR_FACTORY.create(\"permission-blocked\"\n            /* PERMISSION_BLOCKED */\n            );\n          }\n\n          return [4\n          /*yield*/\n          , getPushSubscription(swRegistration, vapidKey)];\n\n        case 1:\n          pushSubscription = _a.sent();\n          return [4\n          /*yield*/\n          , dbGet(firebaseDependencies)];\n\n        case 2:\n          tokenDetails = _a.sent();\n          subscriptionOptions = {\n            vapidKey: vapidKey,\n            swScope: swRegistration.scope,\n            endpoint: pushSubscription.endpoint,\n            auth: arrayToBase64(pushSubscription.getKey('auth')),\n            p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))\n          };\n          if (!!tokenDetails) return [3\n          /*break*/\n          , 3]; // No token, get a new one.\n\n          return [2\n          /*return*/\n          , getNewToken(firebaseDependencies, subscriptionOptions)];\n\n        case 3:\n          if (!!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) return [3\n          /*break*/\n          , 8];\n          _a.label = 4;\n\n        case 4:\n          _a.trys.push([4, 6,, 7]);\n\n          return [4\n          /*yield*/\n          , requestDeleteToken(firebaseDependencies, tokenDetails.token)];\n\n        case 5:\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          e_1 = _a.sent(); // Suppress errors because of #2364\n\n          console.warn(e_1);\n          return [3\n          /*break*/\n          , 7];\n\n        case 7:\n          return [2\n          /*return*/\n          , getNewToken(firebaseDependencies, subscriptionOptions)];\n\n        case 8:\n          if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n            // Weekly token refresh\n            return [2\n            /*return*/\n            , updateToken({\n              token: tokenDetails.token,\n              createTime: Date.now(),\n              subscriptionOptions: subscriptionOptions\n            }, firebaseDependencies, swRegistration)];\n          } else {\n            // Valid token, nothing to do.\n            return [2\n            /*return*/\n            , tokenDetails.token];\n          }\n\n        case 9:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * This method deletes the token from the database, unsubscribes the token from\r\n * FCM, and unregisters the push subscription if it exists.\r\n */\n\n\nfunction deleteToken(firebaseDependencies, swRegistration) {\n  return __awaiter(this, void 0, void 0, function () {\n    var tokenDetails, pushSubscription;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , dbGet(firebaseDependencies)];\n\n        case 1:\n          tokenDetails = _a.sent();\n          if (!tokenDetails) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , requestDeleteToken(firebaseDependencies, tokenDetails.token)];\n\n        case 2:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , dbRemove(firebaseDependencies)];\n\n        case 3:\n          _a.sent();\n\n          _a.label = 4;\n\n        case 4:\n          return [4\n          /*yield*/\n          , swRegistration.pushManager.getSubscription()];\n\n        case 5:\n          pushSubscription = _a.sent();\n\n          if (pushSubscription) {\n            return [2\n            /*return*/\n            , pushSubscription.unsubscribe()];\n          } // If there's no SW, consider it a success.\n\n\n          return [2\n          /*return*/\n          , true];\n      }\n    });\n  });\n}\n\nfunction updateToken(tokenDetails, firebaseDependencies, swRegistration) {\n  return __awaiter(this, void 0, void 0, function () {\n    var updatedToken, updatedTokenDetails, e_2;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 3,, 5]);\n\n          return [4\n          /*yield*/\n          , requestUpdateToken(firebaseDependencies, tokenDetails)];\n\n        case 1:\n          updatedToken = _a.sent();\n          updatedTokenDetails = __assign({\n            token: updatedToken,\n            createTime: Date.now()\n          }, tokenDetails);\n          return [4\n          /*yield*/\n          , dbSet(firebaseDependencies, updatedTokenDetails)];\n\n        case 2:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , updatedToken];\n\n        case 3:\n          e_2 = _a.sent();\n          return [4\n          /*yield*/\n          , deleteToken(firebaseDependencies, swRegistration)];\n\n        case 4:\n          _a.sent();\n\n          throw e_2;\n\n        case 5:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction getNewToken(firebaseDependencies, subscriptionOptions) {\n  return __awaiter(this, void 0, void 0, function () {\n    var token, tokenDetails;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , requestGetToken(firebaseDependencies, subscriptionOptions)];\n\n        case 1:\n          token = _a.sent();\n          tokenDetails = {\n            token: token,\n            createTime: Date.now(),\n            subscriptionOptions: subscriptionOptions\n          };\n          return [4\n          /*yield*/\n          , dbSet(firebaseDependencies, tokenDetails)];\n\n        case 2:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , tokenDetails.token];\n      }\n    });\n  });\n}\n/**\r\n * Gets a PushSubscription for the current user.\r\n */\n\n\nfunction getPushSubscription(swRegistration, vapidKey) {\n  return __awaiter(this, void 0, void 0, function () {\n    var subscription;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , swRegistration.pushManager.getSubscription()];\n\n        case 1:\n          subscription = _a.sent();\n\n          if (subscription) {\n            return [2\n            /*return*/\n            , subscription];\n          }\n\n          return [2\n          /*return*/\n          , swRegistration.pushManager.subscribe({\n            userVisibleOnly: true,\n            // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n            // submitted to pushManager#subscribe must be of type Uint8Array.\n            applicationServerKey: base64ToArray(vapidKey)\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Checks if the saved tokenDetails object matches the configuration provided.\r\n */\n\n\nfunction isTokenValid(dbOptions, currentOptions) {\n  var isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  var isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  var isAuthEqual = currentOptions.auth === dbOptions.auth;\n  var isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar MessageType;\n\n(function (MessageType) {\n  MessageType[\"PUSH_RECEIVED\"] = \"push-received\";\n  MessageType[\"NOTIFICATION_CLICKED\"] = \"notification-clicked\";\n})(MessageType || (MessageType = {}));\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isConsoleMessage(data) {\n  // This message has a campaign ID, meaning it was sent using the\n  // Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar WindowController =\n/** @class */\nfunction () {\n  function WindowController(firebaseDependencies) {\n    var _this = this;\n\n    this.firebaseDependencies = firebaseDependencies;\n    this.vapidKey = null;\n    this.onMessageCallback = null;\n    navigator.serviceWorker.addEventListener('message', function (e) {\n      return _this.messageEventListener(e);\n    });\n  }\n\n  Object.defineProperty(WindowController.prototype, \"app\", {\n    get: function () {\n      return this.firebaseDependencies.app;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  WindowController.prototype.getToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var swRegistration;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.vapidKey) {\n              this.vapidKey = DEFAULT_VAPID_KEY;\n            }\n\n            return [4\n            /*yield*/\n            , this.getServiceWorkerRegistration()];\n\n          case 1:\n            swRegistration = _a.sent();\n            if (!(Notification.permission === 'default')) return [3\n            /*break*/\n            , 3]; // The user hasn't allowed or denied notifications yet. Ask them.\n\n            return [4\n            /*yield*/\n            , Notification.requestPermission()];\n\n          case 2:\n            // The user hasn't allowed or denied notifications yet. Ask them.\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            if (Notification.permission !== 'granted') {\n              throw ERROR_FACTORY.create(\"permission-blocked\"\n              /* PERMISSION_BLOCKED */\n              );\n            }\n\n            return [2\n            /*return*/\n            , getToken(this.firebaseDependencies, swRegistration, this.vapidKey)];\n        }\n      });\n    });\n  };\n\n  WindowController.prototype.deleteToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var swRegistration;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getServiceWorkerRegistration()];\n\n          case 1:\n            swRegistration = _a.sent();\n            return [2\n            /*return*/\n            , deleteToken(this.firebaseDependencies, swRegistration)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Request permission if it is not currently granted.\r\n   *\r\n   * @return Resolves if the permission was granted, rejects otherwise.\r\n   *\r\n   * @deprecated Use Notification.requestPermission() instead.\r\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\r\n   */\n\n\n  WindowController.prototype.requestPermission = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var permissionResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (Notification.permission === 'granted') {\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , Notification.requestPermission()];\n\n          case 1:\n            permissionResult = _a.sent();\n\n            if (permissionResult === 'granted') {\n              return [2\n              /*return*/\n              ];\n            } else if (permissionResult === 'denied') {\n              throw ERROR_FACTORY.create(\"permission-blocked\"\n              /* PERMISSION_BLOCKED */\n              );\n            } else {\n              throw ERROR_FACTORY.create(\"permission-default\"\n              /* PERMISSION_DEFAULT */\n              );\n            }\n\n        }\n      });\n    });\n  }; // TODO: Deprecate this and make VAPID key a parameter in getToken.\n\n\n  WindowController.prototype.usePublicVapidKey = function (vapidKey) {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(\"use-vapid-key-after-get-token\"\n      /* USE_VAPID_KEY_AFTER_GET_TOKEN */\n      );\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(\"invalid-vapid-key\"\n      /* INVALID_VAPID_KEY */\n      );\n    }\n\n    this.vapidKey = vapidKey;\n  };\n\n  WindowController.prototype.useServiceWorker = function (swRegistration) {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(\"invalid-sw-registration\"\n      /* INVALID_SW_REGISTRATION */\n      );\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(\"use-sw-after-get-token\"\n      /* USE_SW_AFTER_GET_TOKEN */\n      );\n    }\n\n    this.swRegistration = swRegistration;\n  };\n  /**\r\n   * @param nextOrObserver An observer object or a function triggered on\r\n   * message.\r\n   * @return The unsubscribe function for the observer.\r\n   */\n  // TODO: Simplify this to only accept a function and not an Observer.\n\n\n  WindowController.prototype.onMessage = function (nextOrObserver) {\n    var _this = this;\n\n    this.onMessageCallback = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next;\n    return function () {\n      _this.onMessageCallback = null;\n    };\n  };\n\n  WindowController.prototype.setBackgroundMessageHandler = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-sw\"\n    /* AVAILABLE_IN_SW */\n    );\n  }; // Unimplemented\n\n\n  WindowController.prototype.onTokenRefresh = function () {\n    return function () {};\n  };\n  /**\r\n   * Creates or updates the default service worker registration.\r\n   * @return The service worker registration to be used for the push service.\r\n   */\n\n\n  WindowController.prototype.getServiceWorkerRegistration = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, e_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!!this.swRegistration) return [3\n            /*break*/\n            , 4];\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            _a = this;\n            return [4\n            /*yield*/\n            , navigator.serviceWorker.register(DEFAULT_SW_PATH, {\n              scope: DEFAULT_SW_SCOPE\n            })];\n\n          case 2:\n            _a.swRegistration = _b.sent(); // The timing when browser updates sw when sw has an update is unreliable by my experiment.\n            // It leads to version conflict when the SDK upgrades to a newer version in the main page, but\n            // sw is stuck with the old version. For example, https://github.com/firebase/firebase-js-sdk/issues/2590\n            // The following line reliably updates sw if there was an update.\n\n            this.swRegistration.update().catch(function () {\n              /* it is non blocking and we don't care if it failed */\n            });\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _b.sent();\n            throw ERROR_FACTORY.create(\"failed-service-worker-registration\"\n            /* FAILED_DEFAULT_REGISTRATION */\n            , {\n              browserErrorMessage: e_1.message\n            });\n\n          case 4:\n            return [2\n            /*return*/\n            , this.swRegistration];\n        }\n      });\n    });\n  };\n\n  WindowController.prototype.messageEventListener = function (event) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, type, payload, data;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!((_a = event.data) === null || _a === void 0 ? void 0 : _a.firebaseMessaging)) {\n              // Not a message from FCM\n              return [2\n              /*return*/\n              ];\n            }\n\n            _b = event.data.firebaseMessaging, type = _b.type, payload = _b.payload;\n\n            if (this.onMessageCallback && type === MessageType.PUSH_RECEIVED) {\n              this.onMessageCallback(payload);\n            }\n\n            data = payload.data;\n            if (!(isConsoleMessage(data) && data[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1')) return [3\n            /*break*/\n            , 2]; // Analytics is enabled on this message, so we should log it.\n\n            return [4\n            /*yield*/\n            , this.logEvent(type, data)];\n\n          case 1:\n            // Analytics is enabled on this message, so we should log it.\n            _c.sent();\n\n            _c.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  WindowController.prototype.logEvent = function (messageType, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventType, analytics;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            eventType = getEventType(messageType);\n            return [4\n            /*yield*/\n            , this.firebaseDependencies.analyticsProvider.get()];\n\n          case 1:\n            analytics = _a.sent();\n            analytics.logEvent(eventType, {\n              /* eslint-disable camelcase */\n              message_id: data[CONSOLE_CAMPAIGN_ID],\n              message_name: data[CONSOLE_CAMPAIGN_NAME],\n              message_time: data[CONSOLE_CAMPAIGN_TIME],\n              message_device_time: Math.floor(Date.now() / 1000)\n              /* eslint-enable camelcase */\n\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return WindowController;\n}();\n\nfunction getEventType(messageType) {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n\n    default:\n      throw new Error();\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a promise that resolves after given time passes. */\n\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar SwController =\n/** @class */\nfunction () {\n  function SwController(firebaseDependencies) {\n    var _this = this;\n\n    this.firebaseDependencies = firebaseDependencies;\n    this.vapidKey = null;\n    this.bgMessageHandler = null;\n    self.addEventListener('push', function (e) {\n      e.waitUntil(_this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', function (e) {\n      e.waitUntil(_this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', function (e) {\n      e.waitUntil(_this.onNotificationClick(e));\n    });\n  }\n\n  Object.defineProperty(SwController.prototype, \"app\", {\n    get: function () {\n      return this.firebaseDependencies.app;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Calling setBackgroundMessageHandler will opt in to some specific\r\n   * behaviours.\r\n   * 1.) If a notification doesn't need to be shown due to a window already\r\n   * being visible, then push messages will be sent to the page.\r\n   * 2.) If a notification needs to be shown, and the message contains no\r\n   * notification data this method will be called\r\n   * and the promise it returns will be passed to event.waitUntil.\r\n   * If you do not set this callback then all push messages will let and the\r\n   * developer can handle them in a their own 'push' event callback\r\n   *\r\n   * @param callback The callback to be called when a push message is received\r\n   * and a notification must be shown. The callback will be given the data from\r\n   * the push message.\r\n   */\n\n  SwController.prototype.setBackgroundMessageHandler = function (callback) {\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(\"invalid-bg-handler\"\n      /* INVALID_BG_HANDLER */\n      );\n    }\n\n    this.bgMessageHandler = callback;\n  }; // TODO: Remove getToken from SW Controller.\n  // Calling this from an old SW can cause all kinds of trouble.\n\n\n  SwController.prototype.getToken = function () {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenDetails;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!!this.vapidKey) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , dbGet(this.firebaseDependencies)];\n\n          case 1:\n            tokenDetails = _c.sent();\n            this.vapidKey = (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY;\n            _c.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , getToken(this.firebaseDependencies, self.registration, this.vapidKey)];\n        }\n      });\n    });\n  }; // TODO: Remove deleteToken from SW Controller.\n  // Calling this from an old SW can cause all kinds of trouble.\n\n\n  SwController.prototype.deleteToken = function () {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  };\n\n  SwController.prototype.requestPermission = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\"\n    /* AVAILABLE_IN_WINDOW */\n    );\n  }; // TODO: Deprecate this and make VAPID key a parameter in getToken.\n  // TODO: Remove this together with getToken from SW Controller.\n\n\n  SwController.prototype.usePublicVapidKey = function (vapidKey) {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(\"use-vapid-key-after-get-token\"\n      /* USE_VAPID_KEY_AFTER_GET_TOKEN */\n      );\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(\"invalid-vapid-key\"\n      /* INVALID_VAPID_KEY */\n      );\n    }\n\n    this.vapidKey = vapidKey;\n  };\n\n  SwController.prototype.useServiceWorker = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\"\n    /* AVAILABLE_IN_WINDOW */\n    );\n  };\n\n  SwController.prototype.onMessage = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\"\n    /* AVAILABLE_IN_WINDOW */\n    );\n  };\n\n  SwController.prototype.onTokenRefresh = function () {\n    throw ERROR_FACTORY.create(\"only-available-in-window\"\n    /* AVAILABLE_IN_WINDOW */\n    );\n  };\n  /**\r\n   * A handler for push events that shows notifications based on the content of\r\n   * the payload.\r\n   *\r\n   * The payload must be a JSON-encoded Object with a `notification` key. The\r\n   * value of the `notification` property will be used as the NotificationOptions\r\n   * object passed to showNotification. Additionally, the `title` property of the\r\n   * notification object will be used as the title.\r\n   *\r\n   * If there is no notification data in the payload then no notification will be\r\n   * shown.\r\n   */\n\n\n  SwController.prototype.onPush = function (event) {\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, clientList, notificationDetails;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            payload = getMessagePayload(event);\n\n            if (!payload) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , getClientList()];\n\n          case 1:\n            clientList = _a.sent();\n\n            if (hasVisibleClients(clientList)) {\n              // App in foreground. Send to page.\n              return [2\n              /*return*/\n              , sendMessageToWindowClients(clientList, payload)];\n            }\n\n            notificationDetails = getNotificationData(payload);\n            if (!notificationDetails) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , showNotification(notificationDetails)];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 3:\n            if (!this.bgMessageHandler) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.bgMessageHandler(payload)];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SwController.prototype.onSubChange = function (event) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var newSubscription, tokenDetails;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            newSubscription = event.newSubscription;\n            if (!!newSubscription) return [3\n            /*break*/\n            , 2]; // Subscription revoked, delete token\n\n            return [4\n            /*yield*/\n            , deleteToken(this.firebaseDependencies, self.registration)];\n\n          case 1:\n            // Subscription revoked, delete token\n            _c.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 2:\n            return [4\n            /*yield*/\n            , dbGet(this.firebaseDependencies)];\n\n          case 3:\n            tokenDetails = _c.sent();\n            return [4\n            /*yield*/\n            , deleteToken(this.firebaseDependencies, self.registration)];\n\n          case 4:\n            _c.sent();\n\n            return [4\n            /*yield*/\n            , getToken(this.firebaseDependencies, self.registration, (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY)];\n\n          case 5:\n            _c.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SwController.prototype.onNotificationClick = function (event) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, link, client, message;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            payload = (_b = (_a = event.notification) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b[FCM_MSG];\n\n            if (!payload) {\n              // Not an FCM notification, do nothing.\n              return [2\n              /*return*/\n              ];\n            } else if (event.action) {\n              // User clicked on an action button.\n              // This will allow devs to act on action button clicks by using a custom\n              // onNotificationClick listener that they define.\n              return [2\n              /*return*/\n              ];\n            } // Prevent other listeners from receiving the event\n\n\n            event.stopImmediatePropagation();\n            event.notification.close();\n            link = getLink(payload);\n\n            if (!link) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , getWindowClient(link)];\n\n          case 1:\n            client = _c.sent();\n            if (!!client) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , self.clients.openWindow(link)];\n\n          case 2:\n            // Unable to find window client so need to open one.\n            // This also focuses the opened client.\n            client = _c.sent(); // Wait three seconds for the client to initialize and set up the message\n            // handler so that it can receive the message.\n\n            return [4\n            /*yield*/\n            , sleep(3000)];\n\n          case 3:\n            // Wait three seconds for the client to initialize and set up the message\n            // handler so that it can receive the message.\n            _c.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            return [4\n            /*yield*/\n            , client.focus()];\n\n          case 5:\n            client = _c.sent();\n            _c.label = 6;\n\n          case 6:\n            if (!client) {\n              // Window Client will not be returned if it's for a third party origin.\n              return [2\n              /*return*/\n              ];\n            }\n\n            message = createNewMessage(MessageType.NOTIFICATION_CLICKED, payload);\n            return [2\n            /*return*/\n            , client.postMessage(message)];\n        }\n      });\n    });\n  };\n\n  return SwController;\n}();\n\nfunction getMessagePayload(_a) {\n  var data = _a.data;\n\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\nfunction getNotificationData(payload) {\n  var _a;\n\n  if (!payload || typeof payload.notification !== 'object') {\n    return;\n  }\n\n  var notificationInformation = __assign({}, payload.notification); // Put the message payload under FCM_MSG name so we can identify the\n  // notification as being an FCM notification vs a notification from\n  // somewhere else (i.e. normal web push or developer generated\n  // notification).\n\n\n  notificationInformation.data = __assign(__assign({}, payload.notification.data), (_a = {}, _a[FCM_MSG] = payload, _a));\n  return notificationInformation;\n}\n/**\r\n * @param url The URL to look for when focusing a client.\r\n * @return Returns an existing window client or a newly opened WindowClient.\r\n */\n\n\nfunction getWindowClient(url) {\n  return __awaiter(this, void 0, void 0, function () {\n    var parsedURL, clientList, clientList_1, clientList_1_1, client, parsedClientUrl;\n\n    var e_1, _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          parsedURL = new URL(url, self.location.href);\n          return [4\n          /*yield*/\n          , getClientList()];\n\n        case 1:\n          clientList = _b.sent();\n\n          try {\n            for (clientList_1 = __values(clientList), clientList_1_1 = clientList_1.next(); !clientList_1_1.done; clientList_1_1 = clientList_1.next()) {\n              client = clientList_1_1.value;\n              parsedClientUrl = new URL(client.url, self.location.href);\n\n              if (parsedClientUrl.host === parsedURL.host) {\n                return [2\n                /*return*/\n                , client];\n              }\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (clientList_1_1 && !clientList_1_1.done && (_a = clientList_1.return)) _a.call(clientList_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n\n          return [2\n          /*return*/\n          , null];\n      }\n    });\n  });\n}\n/**\r\n * @returns If there is currently a visible WindowClient, this method will\r\n * resolve to true, otherwise false.\r\n */\n\n\nfunction hasVisibleClients(clientList) {\n  return clientList.some(function (client) {\n    return client.visibilityState === 'visible' && // Ignore chrome-extension clients as that matches the background pages\n    // of extensions, which are always considered visible for some reason.\n    !client.url.startsWith('chrome-extension://');\n  });\n}\n/**\r\n * @param payload The data from the push event that should be sent to all\r\n * available pages.\r\n * @returns Returns a promise that resolves once the message has been sent to\r\n * all WindowClients.\r\n */\n\n\nfunction sendMessageToWindowClients(clientList, payload) {\n  var e_2, _a;\n\n  var message = createNewMessage(MessageType.PUSH_RECEIVED, payload);\n\n  try {\n    for (var clientList_2 = __values(clientList), clientList_2_1 = clientList_2.next(); !clientList_2_1.done; clientList_2_1 = clientList_2.next()) {\n      var client = clientList_2_1.value;\n      client.postMessage(message);\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (clientList_2_1 && !clientList_2_1.done && (_a = clientList_2.return)) _a.call(clientList_2);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\n\nfunction getClientList() {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n\n  });\n}\n\nfunction createNewMessage(type, payload) {\n  return {\n    firebaseMessaging: {\n      type: type,\n      payload: payload\n    }\n  };\n}\n\nfunction showNotification(details) {\n  var _a;\n\n  var title = (_a = details.title) !== null && _a !== void 0 ? _a : '';\n  var actions = details.actions; // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n\n  var maxActions = Notification.maxActions;\n\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\"This browser only supports \" + maxActions + \" actions. The remaining actions will not be displayed.\");\n  }\n\n  return self.registration.showNotification(title, details);\n}\n\nfunction getLink(payload) {\n  var _a, _b, _c; // eslint-disable-next-line camelcase\n\n\n  var link = (_b = (_a = payload.fcmOptions) === null || _a === void 0 ? void 0 : _a.link) !== null && _b !== void 0 ? _b : (_c = payload.notification) === null || _c === void 0 ? void 0 : _c.click_action;\n\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar MESSAGING_NAME = 'messaging';\n\nfunction factoryMethod(container) {\n  // Dependencies.\n  var app = container.getProvider('app').getImmediate();\n  var appConfig = extractAppConfig(app);\n  var installations = container.getProvider('installations').getImmediate();\n  var analyticsProvider = container.getProvider('analytics-internal');\n  var firebaseDependencies = {\n    app: app,\n    appConfig: appConfig,\n    installations: installations,\n    analyticsProvider: analyticsProvider\n  };\n\n  if (!isSupported()) {\n    throw ERROR_FACTORY.create(\"unsupported-browser\"\n    /* UNSUPPORTED_BROWSER */\n    );\n  }\n\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return new SwController(firebaseDependencies);\n  } else {\n    // Assume we are in the window context.\n    return new WindowController(firebaseDependencies);\n  }\n}\n\nvar NAMESPACE_EXPORTS = {\n  isSupported: isSupported\n};\nfirebase.INTERNAL.registerComponent(new Component(MESSAGING_NAME, factoryMethod, \"PUBLIC\"\n/* PUBLIC */\n).setServiceProps(NAMESPACE_EXPORTS));\n\nfunction isSupported() {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSWControllerSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowControllerSupported();\n  }\n}\n/**\r\n * Checks to see if the required APIs exist.\r\n */\n\n\nfunction isWindowControllerSupported() {\n  return 'indexedDB' in window && indexedDB !== null && navigator.cookieEnabled && 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n/**\r\n * Checks to see if the required APIs exist within SW Context.\r\n */\n\n\nfunction isSWControllerSupported() {\n  return 'indexedDB' in self && indexedDB !== null && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}","map":{"version":3,"sources":["../src/util/errors.ts","../src/helpers/extract-app-config.ts","../src/helpers/array-base64-translator.ts","../src/helpers/migrate-old-database.ts","../src/helpers/idb-manager.ts","../src/util/constants.ts","../src/core/api.ts","../src/core/token-management.ts","../src/interfaces/internal-message.ts","../src/helpers/is-console-message.ts","../src/controllers/window-controller.ts","../src/helpers/sleep.ts","../src/controllers/sw-controller.ts","../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the firebase SDK.\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occured while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occured while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occured while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/app-config';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String\n    .replace(/=/g, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { openDb, deleteDb } from 'idb';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher,\n * so that the upgrade callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API\n    // and does not exist in all browsers.\n    // TODO: Remove typecast when it lands in TS types.\n    const databases = await (indexedDB as {\n      databases(): Promise<Array<{ name: string; version: number }>>;\n    }).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, openDb, deleteDb } from 'idb';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from './migrate-old-database';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDb(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n/** Key of FCM Payload in Notification's data field. */\nexport const FCM_MSG = 'FCM_MSG';\n\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\n/** Set to '1' if Analytics is enabled for the campaign */\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorCode, ERROR_FACTORY } from '../util/errors';\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { TokenDetails, SubscriptionOptions } from '../interfaces/token-details';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { AppConfig } from '../interfaces/app-config';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { dbGet, dbSet, dbRemove } from '../helpers/idb-manager';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails, SubscriptionOptions } from '../interfaces/token-details';\nimport { requestUpdateToken, requestGetToken, requestDeleteToken } from './api';\nimport { arrayToBase64, base64ToArray} from '../helpers/array-base64-translator';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\n/** UpdateRegistration will be called once every week. */\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<string> {\n  if (Notification.permission !== 'granted') {\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n  }\n\n  // If a PushSubscription exists it's returned, otherwise a new subscription\n  // is generated and returned.\n  const pushSubscription = await getPushSubscription(swRegistration, vapidKey);\n  const tokenDetails = await dbGet(firebaseDependencies);\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey,\n    swScope: swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(\n      {\n        token: tokenDetails.token,\n        createTime: Date.now(),\n        subscriptionOptions\n      },\n      firebaseDependencies,\n      swRegistration\n    );\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from\n * FCM, and unregisters the push subscription if it exists.\n */\nexport async function deleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<boolean> {\n  const tokenDetails = await dbGet(firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    await dbRemove(firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription = await swRegistration.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  tokenDetails: TokenDetails,\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      token: updatedToken,\n      createTime: Date.now(),\n      ...tokenDetails\n    };\n\n    await dbSet(firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteToken(firebaseDependencies, swRegistration);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from './message-payload';\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\nexport interface InternalMessage {\n  firebaseMessaging: {\n    type: MessageType;\n    payload: MessagePayload;\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConsoleMessageData } from '../interfaces/message-payload';\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the\n  // Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getToken, deleteToken } from '../core/token-management';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { InternalMessage, MessageType } from '../interfaces/internal-message';\nimport {\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME,\n  DEFAULT_SW_PATH,\n  DEFAULT_SW_SCOPE,\n  DEFAULT_VAPID_KEY\n} from '../util/constants';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ConsoleMessageData } from '../interfaces/message-payload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { FirebaseService } from '@firebase/app-types/private';\n\nexport class WindowController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private swRegistration?: ServiceWorkerRegistration;\n  private onMessageCallback: NextFn<object> | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    navigator.serviceWorker.addEventListener('message', e =>\n      this.messageEventListener(e)\n    );\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      this.vapidKey = DEFAULT_VAPID_KEY;\n    }\n\n    const swRegistration = await this.getServiceWorkerRegistration();\n\n    // Check notification permission.\n    if (Notification.permission === 'default') {\n      // The user hasn't allowed or denied notifications yet. Ask them.\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission !== 'granted') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    }\n\n    return getToken(this.firebaseDependencies, swRegistration, this.vapidKey);\n  }\n\n  async deleteToken(): Promise<boolean> {\n    const swRegistration = await this.getServiceWorkerRegistration();\n\n    return deleteToken(this.firebaseDependencies, swRegistration);\n  }\n\n  /**\n   * Request permission if it is not currently granted.\n   *\n   * @return Resolves if the permission was granted, rejects otherwise.\n   *\n   * @deprecated Use Notification.requestPermission() instead.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\n   */\n  async requestPermission(): Promise<void> {\n    if (Notification.permission === 'granted') {\n      return;\n    }\n\n    const permissionResult = await Notification.requestPermission();\n    if (permissionResult === 'granted') {\n      return;\n    } else if (permissionResult === 'denied') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_DEFAULT);\n    }\n  }\n\n  // TODO: Deprecate this and make VAPID key a parameter in getToken.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(swRegistration: ServiceWorkerRegistration): void {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_SW_AFTER_GET_TOKEN);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  /**\n   * @param nextOrObserver An observer object or a function triggered on\n   * message.\n   * @return The unsubscribe function for the observer.\n   */\n  // TODO: Simplify this to only accept a function and not an Observer.\n  onMessage(nextOrObserver: NextFn<object> | Observer<object>): Unsubscribe {\n    this.onMessageCallback =\n      typeof nextOrObserver === 'function'\n        ? nextOrObserver\n        : nextOrObserver.next;\n\n    return () => {\n      this.onMessageCallback = null;\n    };\n  }\n\n  setBackgroundMessageHandler(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  // Unimplemented\n  onTokenRefresh(): Unsubscribe {\n    return () => {};\n  }\n\n  /**\n   * Creates or updates the default service worker registration.\n   * @return The service worker registration to be used for the push service.\n   */\n  private async getServiceWorkerRegistration(): Promise<\n    ServiceWorkerRegistration\n  > {\n    if (!this.swRegistration) {\n      try {\n        this.swRegistration = await navigator.serviceWorker.register(\n          DEFAULT_SW_PATH,\n          {\n            scope: DEFAULT_SW_SCOPE\n          }\n        );\n\n        // The timing when browser updates sw when sw has an update is unreliable by my experiment.\n        // It leads to version conflict when the SDK upgrades to a newer version in the main page, but\n        // sw is stuck with the old version. For example, https://github.com/firebase/firebase-js-sdk/issues/2590\n        // The following line reliably updates sw if there was an update.\n        this.swRegistration.update().catch(() => {\n          /* it is non blocking and we don't care if it failed */\n        });\n      } catch (e) {\n        throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, {\n          browserErrorMessage: e.message\n        });\n      }\n    }\n\n    return this.swRegistration;\n  }\n\n  private async messageEventListener(event: MessageEvent): Promise<void> {\n    if (!event.data?.firebaseMessaging) {\n      // Not a message from FCM\n      return;\n    }\n\n    const { type, payload } = (event.data as InternalMessage).firebaseMessaging;\n\n    if (this.onMessageCallback && type === MessageType.PUSH_RECEIVED) {\n      this.onMessageCallback(payload);\n    }\n\n    const { data } = payload;\n    if (\n      isConsoleMessage(data) &&\n      data[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n    ) {\n      // Analytics is enabled on this message, so we should log it.\n      await this.logEvent(type, data);\n    }\n  }\n\n  private async logEvent(\n    messageType: MessageType,\n    data: ConsoleMessageData\n  ): Promise<void> {\n    const eventType = getEventType(messageType);\n    const analytics = await this.firebaseDependencies.analyticsProvider.get();\n    analytics.logEvent(eventType, {\n      /* eslint-disable camelcase */\n      message_id: data[CONSOLE_CAMPAIGN_ID],\n      message_name: data[CONSOLE_CAMPAIGN_NAME],\n      message_time: data[CONSOLE_CAMPAIGN_TIME],\n      message_device_time: Math.floor(Date.now() / 1000)\n      /* eslint-enable camelcase */\n    });\n  }\n}\n\nfunction getEventType(messageType: MessageType): string {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteToken, getToken } from '../core/token-management';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport {\n  MessagePayload,\n  NotificationDetails\n} from '../interfaces/message-payload';\nimport { FCM_MSG, DEFAULT_VAPID_KEY } from '../util/constants';\nimport { MessageType, InternalMessage } from '../interfaces/internal-message';\nimport { dbGet } from '../helpers/idb-manager';\nimport { Unsubscribe } from '@firebase/util';\nimport { sleep } from '../helpers/sleep';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { FirebaseService } from '@firebase/app-types/private';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport type BgMessageHandler = (payload: MessagePayload) => unknown;\n\nexport class SwController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private bgMessageHandler: BgMessageHandler | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    self.addEventListener('push', e => {\n      e.waitUntil(this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', e => {\n      e.waitUntil(this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', e => {\n      e.waitUntil(this.onNotificationClick(e));\n    });\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  /**\n   * Calling setBackgroundMessageHandler will opt in to some specific\n   * behaviours.\n   * 1.) If a notification doesn't need to be shown due to a window already\n   * being visible, then push messages will be sent to the page.\n   * 2.) If a notification needs to be shown, and the message contains no\n   * notification data this method will be called\n   * and the promise it returns will be passed to event.waitUntil.\n   * If you do not set this callback then all push messages will let and the\n   * developer can handle them in a their own 'push' event callback\n   *\n   * @param callback The callback to be called when a push message is received\n   * and a notification must be shown. The callback will be given the data from\n   * the push message.\n   */\n  setBackgroundMessageHandler(callback: BgMessageHandler): void {\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_BG_HANDLER);\n    }\n\n    this.bgMessageHandler = callback;\n  }\n\n  // TODO: Remove getToken from SW Controller.\n  // Calling this from an old SW can cause all kinds of trouble.\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      // Call getToken using the current VAPID key if there already is a token.\n      // This is needed because usePublicVapidKey was not available in SW.\n      // It will be removed when vapidKey becomes a parameter of getToken, or\n      // when getToken is removed from SW.\n      const tokenDetails = await dbGet(this.firebaseDependencies);\n      this.vapidKey =\n        tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n    }\n\n    return getToken(\n      this.firebaseDependencies,\n      self.registration,\n      this.vapidKey\n    );\n  }\n\n  // TODO: Remove deleteToken from SW Controller.\n  // Calling this from an old SW can cause all kinds of trouble.\n  deleteToken(): Promise<boolean> {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  }\n\n  requestPermission(): Promise<void> {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  // TODO: Deprecate this and make VAPID key a parameter in getToken.\n  // TODO: Remove this together with getToken from SW Controller.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onTokenRefresh(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * A handler for push events that shows notifications based on the content of\n   * the payload.\n   *\n   * The payload must be a JSON-encoded Object with a `notification` key. The\n   * value of the `notification` property will be used as the NotificationOptions\n   * object passed to showNotification. Additionally, the `title` property of the\n   * notification object will be used as the title.\n   *\n   * If there is no notification data in the payload then no notification will be\n   * shown.\n   */\n  async onPush(event: PushEvent): Promise<void> {\n    const payload = getMessagePayload(event);\n    if (!payload) {\n      return;\n    }\n\n    const clientList = await getClientList();\n    if (hasVisibleClients(clientList)) {\n      // App in foreground. Send to page.\n      return sendMessageToWindowClients(clientList, payload);\n    }\n\n    const notificationDetails = getNotificationData(payload);\n    if (notificationDetails) {\n      await showNotification(notificationDetails);\n    } else if (this.bgMessageHandler) {\n      await this.bgMessageHandler(payload);\n    }\n  }\n\n  async onSubChange(event: PushSubscriptionChangeEvent): Promise<void> {\n    const { newSubscription } = event;\n    if (!newSubscription) {\n      // Subscription revoked, delete token\n      await deleteToken(this.firebaseDependencies, self.registration);\n      return;\n    }\n\n    const tokenDetails = await dbGet(this.firebaseDependencies);\n    await deleteToken(this.firebaseDependencies, self.registration);\n    await getToken(\n      this.firebaseDependencies,\n      self.registration,\n      tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY\n    );\n  }\n\n  async onNotificationClick(event: NotificationEvent): Promise<void> {\n    const payload: MessagePayload = event.notification?.data?.[FCM_MSG];\n    if (!payload) {\n      // Not an FCM notification, do nothing.\n      return;\n    } else if (event.action) {\n      // User clicked on an action button.\n      // This will allow devs to act on action button clicks by using a custom\n      // onNotificationClick listener that they define.\n      return;\n    }\n\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n    event.notification.close();\n\n    const link = getLink(payload);\n    if (!link) {\n      return;\n    }\n\n    let client = await getWindowClient(link);\n    if (!client) {\n      // Unable to find window client so need to open one.\n      // This also focuses the opened client.\n      client = await self.clients.openWindow(link);\n      // Wait three seconds for the client to initialize and set up the message\n      // handler so that it can receive the message.\n      await sleep(3000);\n    } else {\n      client = await client.focus();\n    }\n\n    if (!client) {\n      // Window Client will not be returned if it's for a third party origin.\n      return;\n    }\n\n    const message = createNewMessage(MessageType.NOTIFICATION_CLICKED, payload);\n    return client.postMessage(message);\n  }\n}\n\nfunction getMessagePayload({ data }: PushEvent): MessagePayload | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\nfunction getNotificationData(\n  payload: MessagePayload\n): NotificationDetails | undefined {\n  if (!payload || typeof payload.notification !== 'object') {\n    return;\n  }\n\n  const notificationInformation: NotificationDetails = {\n    ...payload.notification\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the\n  // notification as being an FCM notification vs a notification from\n  // somewhere else (i.e. normal web push or developer generated\n  // notification).\n  notificationInformation.data = {\n    ...payload.notification.data,\n    [FCM_MSG]: payload\n  };\n\n  return notificationInformation;\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: string): Promise<WindowClient | null> {\n  // Use URL to normalize the URL when comparing to windowClients.\n  // This at least handles whether to include trailing slashes or not\n  const parsedURL = new URL(url, self.location.href);\n\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const parsedClientUrl = new URL(client.url, self.location.href);\n    if (parsedClientUrl.host === parsedURL.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will\n * resolve to true, otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages\n      // of extensions, which are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\n/**\n * @param payload The data from the push event that should be sent to all\n * available pages.\n * @returns Returns a promise that resolves once the message has been sent to\n * all WindowClients.\n */\nfunction sendMessageToWindowClients(\n  clientList: WindowClient[],\n  payload: MessagePayload\n): void {\n  const message = createNewMessage(MessageType.PUSH_RECEIVED, payload);\n\n  for (const client of clientList) {\n    client.postMessage(message);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction createNewMessage(\n  type: MessageType,\n  payload: MessagePayload\n): InternalMessage {\n  return {\n    firebaseMessaging: { type, payload }\n  };\n}\n\nfunction showNotification(details: NotificationDetails): Promise<void> {\n  const title = details.title ?? '';\n\n  const { actions } = details;\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(title, details);\n}\n\nfunction getLink(payload: MessagePayload): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport {\n  _FirebaseNamespace,\n  FirebaseService\n} from '@firebase/app-types/private';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { extractAppConfig } from './helpers/extract-app-config';\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport { WindowController } from './controllers/window-controller';\nimport { SwController } from './controllers/sw-controller';\n\nconst MESSAGING_NAME = 'messaging';\nfunction factoryMethod(\n  container: ComponentContainer\n): FirebaseService & FirebaseMessaging {\n  // Dependencies.\n  const app = container.getProvider('app').getImmediate();\n  const appConfig = extractAppConfig(app);\n  const installations = container.getProvider('installations').getImmediate();\n  const analyticsProvider = container.getProvider('analytics-internal');\n\n  const firebaseDependencies: FirebaseInternalDependencies = {\n    app,\n    appConfig,\n    installations,\n    analyticsProvider\n  };\n\n  if (!isSupported()) {\n    throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n  }\n\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return new SwController(firebaseDependencies);\n  } else {\n    // Assume we are in the window context.\n    return new WindowController(firebaseDependencies);\n  }\n}\n\nconst NAMESPACE_EXPORTS = {\n  isSupported\n};\n\n(firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n  new Component(\n    MESSAGING_NAME,\n    factoryMethod,\n    ComponentType.PUBLIC\n  ).setServiceProps(NAMESPACE_EXPORTS)\n);\n\n/**\n * Define extension behavior of `registerMessaging`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    messaging: {\n      (app?: FirebaseApp): FirebaseMessaging;\n      isSupported(): boolean;\n    };\n  }\n  interface FirebaseApp {\n    messaging(): FirebaseMessaging;\n  }\n}\n\nfunction isSupported(): boolean {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSWControllerSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowControllerSupported();\n  }\n}\n\n/**\n * Checks to see if the required APIs exist.\n */\nfunction isWindowControllerSupported(): boolean {\n  return (\n    'indexedDB' in window &&\n    indexedDB !== null &&\n    navigator.cookieEnabled &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks to see if the required APIs exist within SW Context.\n */\nfunction isSWControllerSupported(): boolean {\n  return (\n    'indexedDB' in self &&\n    indexedDB !== null &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n"]},"metadata":{},"sourceType":"module"}