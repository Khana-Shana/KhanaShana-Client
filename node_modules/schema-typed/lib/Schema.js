"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchemaModel = exports.Schema = void 0;

var _StringType = _interopRequireDefault(require("./StringType"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var Schema = /*#__PURE__*/function () {
  function Schema(schema) {
    this.schema = schema;
  }

  var _proto = Schema.prototype;

  _proto.getFieldType = function getFieldType(fieldName) {
    return this.schema[fieldName] || new _StringType["default"]();
  };

  _proto.getKeys = function getKeys() {
    return Object.keys(this.schema);
  };

  _proto.checkForField = function checkForField(fieldName, fieldValue, data) {
    var fieldChecker = this.schema[fieldName];

    if (!fieldChecker) {
      // fieldValue can be anything if no schema defined
      return {
        hasError: false
      };
    }

    return fieldChecker.check(fieldValue, data);
  };

  _proto.check = function check(data) {
    var _this = this;

    var checkResult = {};
    Object.keys(this.schema).forEach(function (key) {
      checkResult[key] = _this.checkForField(key, data[key], data);
    });
    return checkResult;
  };

  _proto.checkForFieldAsync = function checkForFieldAsync(fieldName, fieldValue, data) {
    var fieldChecker = this.schema[fieldName];

    if (!fieldChecker) {
      // fieldValue can be anything if no schema defined
      return Promise.resolve({
        hasError: false
      });
    }

    return fieldChecker.checkAsync(fieldValue, data);
  };

  _proto.checkAsync = function checkAsync(data) {
    var _this2 = this;

    var checkResult = {};
    var promises = [];
    var keys = [];
    Object.keys(this.schema).forEach(function (key) {
      keys.push(key);
      promises.push(_this2.checkForFieldAsync(key, data[key], data));
    });
    return Promise.all(promises).then(function (values) {
      for (var i = 0; i < values.length; i += 1) {
        checkResult[keys[i]] = values[i];
      }

      return checkResult;
    });
  };

  return Schema;
}();

exports.Schema = Schema;

var SchemaModel = function SchemaModel(o) {
  return new Schema(o);
};

exports.SchemaModel = SchemaModel;

SchemaModel.combine = function () {
  for (var _len = arguments.length, models = new Array(_len), _key = 0; _key < _len; _key++) {
    models[_key] = arguments[_key];
  }

  return new Schema(models.map(function (model) {
    return model.schema;
  }).reduce(function (accumulator, currentValue) {
    return Object.assign(accumulator, currentValue);
  }, {}));
};