"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Type2 = _interopRequireDefault(require("./Type"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _defaults(subClass, superClass); }

/* eslint-disable */
var StringType = /*#__PURE__*/function (_Type) {
  _inheritsLoose(StringType, _Type);

  StringType.from = function from(s) {
    return "".concat(s);
  };

  function StringType() {
    var _this;

    var errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Please enter a valid string';
    _this = _Type.call(this, 'string') || this;

    _Type.prototype.pushRule.call(_assertThisInitialized(_this), function (v) {
      return typeof v === 'string';
    }, errorMessage);

    return _this;
  }

  var _proto = StringType.prototype;

  _proto.containsLetter = function containsLetter(errorMessage) {
    _Type.prototype.pushRule.call(this, function (v) {
      return /[a-zA-Z]/.test(v);
    }, errorMessage);

    return this;
  };

  _proto.containsUppercaseLetter = function containsUppercaseLetter(errorMessage) {
    _Type.prototype.pushRule.call(this, function (v) {
      return /[A-Z]/.test(v);
    }, errorMessage);

    return this;
  };

  _proto.containsLowercaseLetter = function containsLowercaseLetter(errorMessage) {
    _Type.prototype.pushRule.call(this, function (v) {
      return /[a-z]/.test(v);
    }, errorMessage);

    return this;
  };

  _proto.containsLetterOnly = function containsLetterOnly(errorMessage) {
    _Type.prototype.pushRule.call(this, function (v) {
      return /^[a-zA-Z]+$/.test(v);
    }, errorMessage);

    return this;
  };

  _proto.containsNumber = function containsNumber(errorMessage) {
    _Type.prototype.pushRule.call(this, function (v) {
      return /[0-9]/.test(v);
    }, errorMessage);

    return this;
  };

  _proto.isOneOf = function isOneOf(strArr, errorMessage) {
    _Type.prototype.pushRule.call(this, function (v) {
      return !!~strArr.indexOf(v);
    }, errorMessage);

    return this;
  };

  _proto.isEmail = function isEmail(errorMessage) {
    //http://emailregex.com/
    var regexp = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

    _Type.prototype.pushRule.call(this, function (v) {
      return regexp.test(v);
    }, errorMessage);

    return this;
  };

  _proto.isURL = function isURL(errorMessage) {
    var regexp = new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$", 'i');

    _Type.prototype.pushRule.call(this, function (v) {
      return regexp.test(v);
    }, errorMessage);

    return this;
  };

  _proto.isHex = function isHex(errorMessage) {
    var regexp = /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i;

    _Type.prototype.pushRule.call(this, function (v) {
      return regexp.test(v);
    }, errorMessage);

    return this;
  };

  _proto.pattern = function pattern(regexp, errorMessage) {
    _Type.prototype.pushRule.call(this, function (value) {
      return regexp.test(value);
    }, errorMessage);

    return this;
  };

  _proto.rangeLength = function rangeLength(minLength, maxLength, errorMessage) {
    _Type.prototype.pushRule.call(this, function (value) {
      return value.length >= minLength && value.length <= maxLength;
    }, errorMessage);

    return this;
  };

  _proto.minLength = function minLength(_minLength, errorMessage) {
    _Type.prototype.pushRule.call(this, function (value) {
      return _toConsumableArray(value).length >= _minLength;
    }, errorMessage);

    return this;
  };

  _proto.maxLength = function maxLength(_maxLength, errorMessage) {
    _Type.prototype.pushRule.call(this, function (value) {
      return _toConsumableArray(value).length <= _maxLength;
    }, errorMessage);

    return this;
  };

  return StringType;
}(_Type2["default"]);

var _default = function _default(errorMessage) {
  return new StringType(errorMessage);
};

exports["default"] = _default;