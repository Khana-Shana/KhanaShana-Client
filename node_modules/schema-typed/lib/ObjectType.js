"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Type2 = _interopRequireDefault(require("./Type"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _defaults(subClass, superClass); }

var ObjectType = /*#__PURE__*/function (_Type) {
  _inheritsLoose(ObjectType, _Type);

  ObjectType.from = function from(n) {
    return n;
  };

  function ObjectType() {
    var _this;

    var errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Please enter a valid `object`';
    _this = _Type.call(this, 'object') || this;

    _Type.prototype.pushRule.call(_assertThisInitialized(_this), function (v) {
      return _typeof(v) === 'object';
    }, errorMessage);

    return _this;
  }
  /**
   * @example
   * ObjectType('这是一个对象').shape({
   *  name: StringType(),
   *  age: NumberType()
   * })
   */


  var _proto = ObjectType.prototype;

  _proto.shape = function shape(types) {
    _Type.prototype.pushRule.call(this, function (values) {
      var valids = Object.entries(types).map(function (item) {
        var key = item[0];
        var type = item[1];
        return type.check(values[key]);
      });
      var errors = valids.filter(function (item) {
        return item.hasError;
      }) || [];

      if (errors.length) {
        return errors[0];
      }

      return errors.length === 0;
    }, null);

    return this;
  };

  return ObjectType;
}(_Type2["default"]);

var _default = function _default(errorMessage) {
  return new ObjectType(errorMessage);
};

exports["default"] = _default;