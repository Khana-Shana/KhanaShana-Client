"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Type2 = _interopRequireDefault(require("./Type"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _defaults(subClass, superClass); }

var DateType = /*#__PURE__*/function (_Type) {
  _inheritsLoose(DateType, _Type);

  DateType.from = function from(n) {
    return n;
  };

  function DateType() {
    var _this;

    var errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Please enter a valid date';
    _this = _Type.call(this, 'date') || this;

    _Type.prototype.pushRule.call(_assertThisInitialized(_this), function (value) {
      return !/Invalid|NaN/.test(new Date(value));
    }, errorMessage);

    return _this;
  }

  var _proto = DateType.prototype;

  _proto.range = function range(min, max, errorMessage) {
    _Type.prototype.pushRule.call(this, function (value) {
      return new Date(value) >= new Date(min) && new Date(value) <= new Date(max);
    }, errorMessage);

    return this;
  };

  _proto.min = function min(_min, errorMessage) {
    _Type.prototype.pushRule.call(this, function (value) {
      return new Date(value) >= new Date(_min);
    }, errorMessage);

    return this;
  };

  _proto.max = function max(_max, errorMessage) {
    _Type.prototype.pushRule.call(this, function (value) {
      return new Date(value) <= new Date(_max);
    }, errorMessage);

    return this;
  };

  return DateType;
}(_Type2["default"]);

var _default = function _default(errorMessage) {
  return new DateType(errorMessage);
};

exports["default"] = _default;