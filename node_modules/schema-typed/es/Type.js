"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function isEmpty(value) {
  return typeof value === 'undefined' || value === null || value === '';
}

function basicEmptyCheck(value) {
  return typeof value === 'undefined' || value === null;
}

function checkRequired(value, trim, emptyAllowed) {
  // String trim
  if (trim && typeof value === 'string') {
    value = value.replace(/(^\s*)|(\s*$)/g, '');
  }

  if (emptyAllowed) {
    return !basicEmptyCheck(value);
  } // Array


  if (Array.isArray(value)) {
    return !!value.length;
  }

  return !isEmpty(value);
}

function createValidator(data) {
  return function (value, rules) {
    for (var i = 0; i < rules.length; i += 1) {
      var _rules$i = rules[i],
          onValid = _rules$i.onValid,
          errorMessage = _rules$i.errorMessage;
      var checkResult = onValid(value, data);

      if (checkResult === false) {
        return {
          hasError: true,
          errorMessage: errorMessage
        };
      } else if (_typeof(checkResult) === 'object' && checkResult.hasError) {
        return checkResult;
      }
    }

    return null;
  };
}

function createValidatorAsync(data) {
  function check(errorMessage) {
    return function (checkResult) {
      if (checkResult === false) {
        return {
          hasError: true,
          errorMessage: errorMessage
        };
      } else if (_typeof(checkResult) === 'object' && checkResult.hasError) {
        return checkResult;
      }

      return null;
    };
  }

  return function (value, rules) {
    var promises = rules.map(function (rule) {
      var onValid = rule.onValid,
          errorMessage = rule.errorMessage;
      return Promise.resolve(onValid(value, data)).then(check(errorMessage));
    });
    return Promise.all(promises).then(function (results) {
      return results.find(function (item) {
        return item && item.hasError;
      });
    });
  };
}

var Type = /*#__PURE__*/function () {
  function Type(name) {
    this.name = name;
    this.required = false;
    this.requiredMessage = '';
    this.trim = false;
    this.emptyAllowed = false;
    this.rules = [];
    this.priorityRules = []; // Priority check rule
  }

  var _proto = Type.prototype;

  _proto.check = function check(value, data) {
    if (this.required && !checkRequired(value, this.trim, this.emptyAllowed)) {
      return {
        hasError: true,
        errorMessage: this.requiredMessage
      };
    }

    var validator = createValidator(data);
    var checkStatus = validator(value, this.priorityRules);

    if (checkStatus) {
      return checkStatus;
    }

    if (!this.required && isEmpty(value)) {
      return {
        hasError: false
      };
    }

    return validator(value, this.rules) || {
      hasError: false
    };
  };

  _proto.checkAsync = function checkAsync(value, data) {
    var _this = this;

    if (this.required && !checkRequired(value, this.trim, this.emptyAllowed)) {
      return Promise.resolve({
        hasError: true,
        errorMessage: this.requiredMessage
      });
    }

    var validator = createValidatorAsync(data);
    return new Promise(function (resolve) {
      return validator(value, _this.priorityRules).then(function (checkStatus) {
        if (checkStatus) {
          resolve(checkStatus);
        }
      }).then(function () {
        if (!_this.required && isEmpty(value)) {
          resolve({
            hasError: false
          });
        }
      }).then(function () {
        return validator(value, _this.rules);
      }).then(function (checkStatus) {
        if (checkStatus) {
          resolve(checkStatus);
        }

        resolve({
          hasError: false
        });
      });
    });
  };

  _proto.pushRule = function pushRule(onValid, errorMessage, priority) {
    errorMessage = errorMessage || this.rules[0].errorMessage;

    if (priority) {
      this.priorityRules.push({
        onValid: onValid,
        errorMessage: errorMessage
      });
    } else {
      this.rules.push({
        onValid: onValid,
        errorMessage: errorMessage
      });
    }
  };

  _proto.addRule = function addRule(onValid, errorMessage, priority) {
    this.pushRule(onValid, errorMessage, priority);
    return this;
  };

  _proto.isRequired = function isRequired(errorMessage) {
    var trim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    this.required = true;
    this.trim = trim;
    this.requiredMessage = errorMessage;
    return this;
  };

  _proto.isRequiredOrEmpty = function isRequiredOrEmpty(errorMessage) {
    var trim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    this.required = true;
    this.trim = trim;
    this.emptyAllowed = true;
    this.requiredMessage = errorMessage;
    return this;
  };

  return Type;
}();

var _default = Type;
exports["default"] = _default;